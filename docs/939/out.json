[
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,endPos = endPos + 1,162,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result#5 = virtualinvoke $stack14.<java.lang.String: char charAt(int)>(endPos), 163)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = endPos,175,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = endPos, 175)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack63 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack63 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" start pos: "),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' start pos: '), 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack64 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack63),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack64 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack63), 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" end pos: "),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' end pos: '), 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack67 = virtualinvoke $stack65.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack66),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack67 = virtualinvoke $stack65.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack66), 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack68 = virtualinvoke $stack67.<java.lang.StringBuilder: java.lang.String toString()>(),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack68 = virtualinvoke $stack67.<java.lang.StringBuilder: java.lang.String toString()>(), 273)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, specialinvoke $stack57.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($stack68, ex), 273)) => Node(<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, specialinvoke $stack57.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($stack68, ex), 273) => (<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2), 80)) => Node(<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, specialinvoke $stack57.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($stack68, ex), 273) => (<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2), 80) => (<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2), 84)) => Node(<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = l1,288,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, specialinvoke $stack57.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($stack68, ex), 273) => (<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2), 80) => (<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2), 84) => (<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = l1, 288)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,247,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 247)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = $stack31 + 1,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos = $stack31 + 1, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = endPos + 1,261,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos = endPos + 1, 261)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = endPos + 1,253,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, chr = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(endPos), 254)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack66 = endPos + 1,273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack66 = endPos + 1, 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" end pos: "),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' end pos: '), 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack67 = virtualinvoke $stack65.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack66),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack67 = virtualinvoke $stack65.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack66), 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack68 = virtualinvoke $stack67.<java.lang.StringBuilder: java.lang.String toString()>(),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack68 = virtualinvoke $stack67.<java.lang.StringBuilder: java.lang.String toString()>(), 273)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, specialinvoke $stack57.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($stack68, ex), 273)) => Node(<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, specialinvoke $stack57.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($stack68, ex), 273) => (<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2), 80)) => Node(<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, specialinvoke $stack57.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($stack68, ex), 273) => (<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2), 80) => (<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2), 84)) => Node(<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = l1,288,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, specialinvoke $stack57.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($stack68, ex), 273) => (<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2), 80) => (<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2), 84) => (<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = l1, 288))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 76
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 247
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 261
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 253
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>",
	"line": 288
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "endPos = endPos + 1",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 162
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 162
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 175
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>",
	"line": 288
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Throwable: java.lang.String detailMessage> = l1",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>",
					"line": 288
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,l2 = words,46,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,word = l2[l4],49,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,398,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 398)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,88,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 88)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,398,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 398))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 88
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 88
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 398
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l2 = words",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
					"line": 46
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 46
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 49
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 398
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
					"line": 398
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,172,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 172)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,283,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 283)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = escape#23,302,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = escape#23, 302)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,87,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 87)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,247,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 247)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = $stack31 + 1,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos = $stack31 + 1, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack38 = endPos + 1,278,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack38 = endPos + 1, 278)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack38,278,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack38, 278)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,283,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 283)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = escape#23,302,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = escape#23, 302))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 87
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 87
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 247
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 278
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 278
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 283
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 302
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 172
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 172
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 283
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 302
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = escape#23",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
					"line": 302
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack11 = virtualinvoke $stack10.<java.lang.String: java.lang.String substring(int,int)>($stack9, endPos),172,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack11 = virtualinvoke $stack10.<java.lang.String: java.lang.String substring(int,int)>($stack9, endPos), 172)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12), 172)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12), 172) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12), 172) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.Character: int toLowerCase(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12), 172) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack72 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l5), 2576)) => Node(<java.lang.Character: int toLowerCase(int)>,$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: int toLowerCase(int)>(l0),6338,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12), 172) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack72 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l5), 2576)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10),2618,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12), 172) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l10), 2618)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12), 172) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12), 172) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12), 172) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12), 172) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12), 172) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12), 172) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack10 = lengthof l1,198,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack10 = lengthof l1, 198)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack7 = l0.<java.lang.String: char[] value>,1969,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, $stack7 = l0.<java.lang.String: char[] value>, 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack10 = lengthof l1,198,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack10 = lengthof l1, 198))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 64
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1969
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 198
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack11 = virtualinvoke $stack10.<java.lang.String: java.lang.String substring(int,int)>($stack9, endPos)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 172
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 172
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int toLowerCase(int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int toLowerCase(int)>",
	"line": 6338
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2618
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2629
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2633
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2637
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 198
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack10 = lengthof l1",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: void <init>(char[],int,int)>",
					"line": 198
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,parsedString = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(),108,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, parsedString = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 108)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSecondObjectName(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack13 = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSecondObjectName(java.lang.String)>(parsedString), 111)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSecondObjectName(java.lang.String)>,names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name),41,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack13 = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSecondObjectName(java.lang.String)>(parsedString), 111) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSecondObjectName(java.lang.String)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 41)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSecondObjectName(java.lang.String)>,$stack5 = names[$stack4],43,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack13 = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSecondObjectName(java.lang.String)>(parsedString), 111)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack13 = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSecondObjectName(java.lang.String)>(parsedString),111,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack13 = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSecondObjectName(java.lang.String)>(parsedString), 111)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,schemaName = $stack13,112,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, schemaName = $stack13, 112)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>,schemaName := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),215,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 215)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, inheritedTable = virtualinvoke $stack11.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(tableName), 215)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, inheritedTable = virtualinvoke $stack11.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(tableName), 215) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, rel = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>(name), 292)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List rels>,275,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, inheritedTable = virtualinvoke $stack11.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(tableName), 215) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, rel = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>(name), 292) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List rels>, 275)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),275,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, inheritedTable = virtualinvoke $stack11.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(tableName), 215) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, rel = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>(name), 292) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 275)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, inheritedTable = virtualinvoke $stack11.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(tableName), 215) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, rel = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>(name), 292) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>,rel = (cz.startnet.utils.pgdiff.schema.PgRelation) $stack7,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, inheritedTable = virtualinvoke $stack11.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(tableName), 215) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, rel = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>(name), 292)) => Node(<cz.startnet.utils.pgdiff.schema.PgRelation: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgRelation,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack7 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 134)) => Node(<cz.startnet.utils.pgdiff.schema.PgRelation: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgRelation: java.lang.String name>,206,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack7 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 134)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>,$stack8 = virtualinvoke rel.<cz.startnet.utils.pgdiff.schema.PgRelation: java.lang.String getName()>(),276,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, inheritedTable = virtualinvoke $stack11.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(tableName), 215) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, rel = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>(name), 292) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>, $stack8 = virtualinvoke rel.<cz.startnet.utils.pgdiff.schema.PgRelation: java.lang.String getName()>(), 276)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack49 = "[",79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word), 79)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack49 = '['",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 79
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 79
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "parsedString = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>()",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
					"line": 108
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 108
},{
	"class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
	"method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSecondObjectName(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
	"method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSecondObjectName(java.lang.String)>",
	"line": 41
},{
	"class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
	"method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSecondObjectName(java.lang.String)>",
	"line": 43
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 111
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 112
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgTable",
	"method": "<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgTable",
	"method": "<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>",
	"line": 215
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgSchema",
	"method": "<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgSchema",
	"method": "<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgSchema",
	"method": "<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>",
	"line": 275
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgSchema",
	"method": "<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>",
	"line": 275
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgSchema",
	"method": "<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>",
	"line": 281
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgSchema",
	"method": "<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>",
	"line": 281
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgRelation",
	"method": "<cz.startnet.utils.pgdiff.schema.PgRelation: java.lang.String getName()>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgRelation",
	"method": "<cz.startnet.utils.pgdiff.schema.PgRelation: java.lang.String getName()>",
	"line": 206
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgSchema",
	"method": "<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>",
	"line": 276
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack8 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 982
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = endPos,175,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = endPos, 175)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 64
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = endPos",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 175
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 175
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
					"line": 318
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd),67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l10 = l6[$stack30],1357,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l10 = l6[$stack30], 1357)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10),1367,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10), 1367)) => Node(<java.lang.Character: char toLowerCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack34 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l12), 1376)) => Node(<java.lang.Character: char toLowerCase(char)>,$stack1 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l0),6309,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12), 172) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack17 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l4), 2581) => (<java.lang.Character: char toLowerCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l0), 6309)) => Node(<java.lang.Character: char toLowerCase(char)>,$stack2 = (char) $stack1,6309,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack34 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l12), 1376)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack45 = newarray (java.lang.String)[2],57,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd),67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l10 = l6[$stack30],1357,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l10 = l6[$stack30], 1357)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10),1367,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10), 1367)) => Node(<java.lang.Character: char toLowerCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack34 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l12), 1376)) => Node(<java.lang.Character: char toLowerCase(char)>,$stack1 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l0),6309,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12), 172) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack17 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l4), 2581) => (<java.lang.Character: char toLowerCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l0), 6309)) => Node(<java.lang.Character: char toLowerCase(char)>,$stack2 = (char) $stack1,6309,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack34 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l12), 1376))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack45 = newarray (java.lang.String)[2]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 57
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 57
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1346
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1357
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1367
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: char toLowerCase(char)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: char toLowerCase(char)>",
	"line": 6309
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: char toLowerCase(char)>",
	"line": 6309
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1346
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1357
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1367
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: char toLowerCase(char)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: char toLowerCase(char)>",
	"line": 6309
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: char toLowerCase(char)>",
	"line": 6309
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack2 = (char) $stack1",
				"location": {
					"file": "",
					"class": "java.lang.Character",
					"method": "<java.lang.Character: char toLowerCase(char)>",
					"line": 6309
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = endPos,175,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = endPos, 175)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>,charPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,345,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, endPos = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>(), 316)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>,$stack14 = charPos - 1,347,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, endPos = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>(), 316) => (<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>, $stack14 = charPos - 1, 347)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>,$stack16 = virtualinvoke $stack15.<java.lang.String: char charAt(int)>($stack14),347,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, endPos = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>(), 316) => (<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>, $stack16 = virtualinvoke $stack15.<java.lang.String: char charAt(int)>($stack14), 347)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack37 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,70,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack37 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 70)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,72,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 72)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,162,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,163,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,347,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, endPos = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>(), 316) => (<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 347)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>,$stack15 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,347,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, endPos = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>(), 316) => (<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>, $stack15 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 347))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack37 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 70
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 70
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 72
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 162
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 163
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>",
	"line": 347
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>",
	"line": 347
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = endPos",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 175
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 175
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>",
	"line": 345
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>",
	"line": 347
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>",
	"line": 347
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack16 = virtualinvoke $stack15.<java.lang.String: char charAt(int)>($stack14)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>",
					"line": 347
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack6 = newarray (java.lang.String)[1],105,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack6), 105)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,l2 = words,46,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,word = l2[l4],49,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,135,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,247,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 247)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 251)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack7 = newarray (java.lang.String)[1],107,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,l2 = words,46,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,word = l2[l4],49,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,247,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 247)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = $stack31 + 1,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos = $stack31 + 1, 251))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack7 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
					"line": 107
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 107
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 46
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 49
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 247
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack6 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 105
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 46
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 49
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 135
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 247
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
					"line": 251
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,135,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,398,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 398)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack6 = $stack5 + 1,399,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack6 = $stack5 + 1, 399)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack6),399,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack6), 399)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack47 = newarray (java.lang.String)[1],60,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,398,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 398)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack6 = $stack5 + 1,399,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack6 = $stack5 + 1, 399))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack47 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 60
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 60
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 398
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 399
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
					"line": 135
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 135
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 398
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 399
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 399
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack6)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
					"line": 399
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,69,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 69)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,151,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 151)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,163,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack32 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,253,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack32 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 253)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack24 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,286,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack24 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 286)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,398,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 398)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,401,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 401)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,72,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 72)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,296,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 296)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,401,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 401)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack17 = virtualinvoke $stack16.<java.lang.String: int length()>(),401,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack17 = virtualinvoke $stack16.<java.lang.String: int length()>(), 401))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 72
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 72
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 296
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 401
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 401
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 69
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 69
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 151
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 163
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 253
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 286
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 398
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 401
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
					"line": 401
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,135,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,398,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 398)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack6 = $stack5 + 1,399,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack6 = $stack5 + 1, 399)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack13), 88)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack13), 88) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack13), 88) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 67)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,398,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 398)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack6 = $stack5 + 1,399,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack6 = $stack5 + 1, 399)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack13), 88)) => Node(<java.lang.Integer: void <init>(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack13), 88) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) => Node(<java.lang.Integer: void <init>(int)>,l0.<java.lang.Integer: int value> = l1,850,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack13), 88) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832) => (<java.lang.Integer: void <init>(int)>, l0.<java.lang.Integer: int value> = l1, 850))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 398
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 399
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void <init>(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void <init>(int)>",
	"line": 850
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
					"line": 135
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 135
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 398
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 399
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void <init>(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: void <init>(int)>",
	"line": 850
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Integer: int value> = l1",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: void <init>(int)>",
					"line": 850
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 67)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,135,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,322,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 322)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),147,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,definition := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,string = definition,237,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, string = definition, 237)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,matcher = virtualinvoke $stack7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string),245,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, matcher = virtualinvoke $stack7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string), 245)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1),248,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1), 248)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack47 = newarray (java.lang.String)[1],60,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack47 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 60
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 60
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2868
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 135
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 322
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 147
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 237
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 245
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 248
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2868
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack4 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String trim()>",
					"line": 2868
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,endPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,160,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, endPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 160)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,283,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 283)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos#24 = virtualinvoke $stack24.<java.lang.String: char charAt(int)>(escape#23),286,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos#24 = virtualinvoke $stack24.<java.lang.String: char charAt(int)>(escape#23), 286)) => Node(<java.lang.Character: boolean isWhitespace(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)) => Node(<java.lang.Character: boolean isWhitespace(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118) => (<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)) => Node(<java.lang.Character: boolean isWhitespace(int)>,$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: boolean isWhitespace(int)>(l0),6789,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118) => (<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack7 = newarray (java.lang.String)[1],107,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,l2 = words,46,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,word = l2[l4],49,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd),69,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd), 69)) => Node(<java.lang.Character: boolean isWhitespace(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)) => Node(<java.lang.Character: boolean isWhitespace(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118) => (<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)) => Node(<java.lang.Character: boolean isWhitespace(int)>,$stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0),6789,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118) => (<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757) => (<java.lang.Character: boolean isWhitespace(int)>, $stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0), 6789))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack7 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
					"line": 107
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 107
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 46
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 49
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 69
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: boolean isWhitespace(char)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: boolean isWhitespace(int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: boolean isWhitespace(int)>",
	"line": 6789
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "endPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 160
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 160
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 283
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 286
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: boolean isWhitespace(char)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: boolean isWhitespace(int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: boolean isWhitespace(int)>",
	"line": 6789
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: boolean isWhitespace(int)>(l0)",
				"location": {
					"file": "",
					"class": "java.lang.Character",
					"method": "<java.lang.Character: boolean isWhitespace(int)>",
					"line": 6789
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd),67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack45 = newarray (java.lang.String)[2],57,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd),67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack45 = newarray (java.lang.String)[2]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 57
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 57
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1346
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1346
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l6 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
					"line": 1346
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd),67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,$stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8),1109,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack45 = newarray (java.lang.String)[2],57,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd),67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,$stack7 = l0.<java.lang.String: char[] value>,1106,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack7 = l0.<java.lang.String: char[] value>, 1106)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,$stack8 = lengthof $stack7,1109,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack8 = lengthof $stack7, 1109))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack45 = newarray (java.lang.String)[2]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 57
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 57
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": 1106
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": 1109
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": 1109
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
					"line": 1109
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,135,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,247,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 247)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = $stack31 + 1,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos = $stack31 + 1, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack38 = endPos + 1,278,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack38 = endPos + 1, 278)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,l2 = words,46,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,word = l2[l4],49,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,247,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 247)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = $stack31 + 1,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos = $stack31 + 1, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack38 = endPos + 1,278,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack38 = endPos + 1, 278))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = words",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
					"line": 46
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 46
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 49
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 247
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 278
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 76
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 135
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 247
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 278
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack38 = endPos + 1",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
					"line": 278
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd),67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l10 = l6[$stack30],1357,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l10 = l6[$stack30], 1357)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack7 = newarray (java.lang.String)[1],107,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,l2 = words,46,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,word = l2[l4],49,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd),67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l10 = l6[$stack30],1357,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l10 = l6[$stack30], 1357))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack7 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
					"line": 107
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 107
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 46
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 49
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1346
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1357
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1346
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1357
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l10 = l6[$stack30]",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
					"line": 1357
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>,$stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key),29,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack65 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>("CannotFindSchema"),44,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack65 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotFindSchema'), 44)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack67 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack65, $stack66),43,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack67 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack65, $stack66), 43)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>,$stack1 = <cz.startnet.utils.pgdiff.Resources: java.util.ResourceBundle RESOURCE_BUNDLE>,29,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87) => (<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>, $stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key), 29)) => Node(<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>,$stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key),29,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack65 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>("CannotFindSchema"),44,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack65 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotFindSchema'), 44)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack67 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack65, $stack66),43,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack67 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack65, $stack66), 43))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = <cz.startnet.utils.pgdiff.Resources: java.util.ResourceBundle RESOURCE_BUNDLE>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.Resources",
					"method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
					"line": 29
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.Resources",
	"method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
	"line": 29
},{
	"class": "cz.startnet.utils.pgdiff.Resources",
	"method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
	"line": 29
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 44
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 43
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.Resources",
					"method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
					"line": 29
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.Resources",
	"method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
	"line": 29
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 44
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 43
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack67 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack65, $stack66)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 43
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 67)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,135,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,322,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 322)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),147,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,definition := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,string = definition,237,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, string = definition, 237)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,matcher = virtualinvoke $stack7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string),245,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, matcher = virtualinvoke $stack7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string), 245)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1),248,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1), 248)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = l1 + -1,2876,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325) => (<java.lang.String: java.lang.String trim()>, $stack11 = l1 - 1, 2878)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = l1 + -1,2876,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325) => (<java.lang.String: java.lang.String trim()>, $stack11 = l1 - 1, 2878))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 76
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2868
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2868
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2876
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 135
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 322
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 147
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 237
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 245
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 248
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2868
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2868
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2876
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l1 = l1 + -1",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String trim()>",
					"line": 2876
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,154,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 154)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,135,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,322,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 322)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),147,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,definition := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,string = definition,237,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, string = definition, 237)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,matcher = virtualinvoke $stack7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string),245,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, matcher = virtualinvoke $stack7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string), 245)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1),248,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1), 248)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String trim()>,$stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1),2878,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,l2 = words,46,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,word = l2[l4],49,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String trim()>,$stack4 = l0.<java.lang.String: char[] value>,2868,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325) => (<java.lang.String: java.lang.String trim()>, $stack4 = l0.<java.lang.String: char[] value>, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = lengthof $stack4,2868,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325) => (<java.lang.String: java.lang.String trim()>, l1 = lengthof $stack4, 2868)) => Node(<java.lang.String: java.lang.String trim()>,l1 = l1 + -1,2876,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325) => (<java.lang.String: java.lang.String trim()>, $stack11 = l1 - 1, 2878)) => Node(<java.lang.String: java.lang.String trim()>,$stack11 = l1 - 1,2878,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325) => (<java.lang.String: java.lang.String trim()>, $stack11 = l1 - 1, 2878))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = words",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
					"line": 46
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 46
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 49
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2868
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2868
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2876
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2878
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 154
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 154
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 135
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 322
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 147
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 237
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 245
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 248
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2878
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack5 = virtualinvoke l0.<java.lang.String: java.lang.String substring(int,int)>(l2, l1)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String trim()>",
					"line": 2878
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,151,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 151)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,163,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack32 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,253,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack32 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 253)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,259,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 259)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack36 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack36 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 271)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack45 = newarray (java.lang.String)[2],57,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,247,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 247)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack45 = newarray (java.lang.String)[2]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 57
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 57
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 247
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 151
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 151
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 163
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 253
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 259
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack36 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
					"line": 271
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd),67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l10 = l6[$stack30],1357,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l10 = l6[$stack30], 1357)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10),1367,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10), 1367)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,l2 = words,46,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,word = l2[l4],49,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd),67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l10 = l6[$stack30],1357,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l10 = l6[$stack30], 1357)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10),1367,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10), 1367))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = words",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
					"line": 46
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 46
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 49
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1346
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1357
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1367
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1346
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1357
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1367
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
					"line": 1367
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,87,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 87)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,283,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 283)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos#24 = virtualinvoke $stack24.<java.lang.String: char charAt(int)>(escape#23),286,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos#24 = virtualinvoke $stack24.<java.lang.String: char charAt(int)>(escape#23), 286)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack47 = newarray (java.lang.String)[1],60,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,247,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 247)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = $stack31 + 1,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos = $stack31 + 1, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack38 = endPos + 1,278,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack38 = endPos + 1, 278)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack38,278,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack38, 278)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,283,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 283)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos#24 = virtualinvoke $stack24.<java.lang.String: char charAt(int)>(escape#23),286,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos#24 = virtualinvoke $stack24.<java.lang.String: char charAt(int)>(escape#23), 286))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack47 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 60
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 60
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 247
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 278
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 278
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 283
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 286
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 87
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 87
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 283
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 286
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "endPos#24 = virtualinvoke $stack24.<java.lang.String: char charAt(int)>(escape#23)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
					"line": 286
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,87,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 87)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack20 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,397,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack20 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 397)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack17 = $stack20 + 20,400,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack17 = $stack20 + 20, 400)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,specialinvoke $stack16.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3),196,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, specialinvoke $stack16.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3), 196)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,87,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 87)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,296,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 296)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,401,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 401)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack17 = virtualinvoke $stack16.<java.lang.String: int length()>(),401,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack17 = virtualinvoke $stack16.<java.lang.String: int length()>(), 401)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,specialinvoke $stack16.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3),196,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, specialinvoke $stack16.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3), 196))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 87
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 87
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 296
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 401
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 401
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1965
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 196
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 87
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 87
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 397
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 400
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1965
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 196
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack16.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: void <init>(char[],int,int)>",
					"line": 196
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack33,156,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack33, 156)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,398,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 398)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack6 = $stack5 + 1,399,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack6 = $stack5 + 1, 399)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack13), 88)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack13), 88) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,398,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 398)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack6 = $stack5 + 1,399,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack6 = $stack5 + 1, 399)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack13), 88)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,$stack4 = l0 + 128,831,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack13), 88) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, $stack4 = l0 + 128, 831))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack4 = words[0]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
					"line": 99
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 398
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 399
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
	"line": 831
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack33",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 156
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 156
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 398
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 399
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
	"line": 831
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack4 = l0 + 128",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
					"line": 831
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack33,156,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack33, 156)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,400,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 400)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: java.lang.String substring(int,int)>,specialinvoke $stack15.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1),1960,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack15.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1), 1960)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack7 = newarray (java.lang.String)[1],107,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,l2 = words,46,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,word = l2[l4],49,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: java.lang.String substring(int,int)>,specialinvoke $stack15.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1),1960,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack15.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1), 1960))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack7 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
					"line": 107
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 107
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 46
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 49
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1960
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack33",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 156
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 156
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 400
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1960
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack15.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String substring(int,int)>",
					"line": 1960
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd),67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack15 = l0.<java.lang.String: char[] value>,1354,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack15 = l0.<java.lang.String: char[] value>, 1354)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack16 = lengthof $stack15,1354,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack16 = lengthof $stack15, 1354)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack18 = (long) $stack16,1354,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack18 = (long) $stack16, 1354)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack19 = $stack18 - $stack17,1354,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack19 = $stack18 - $stack17, 1354)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack47 = newarray (java.lang.String)[1],60,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd),67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack15 = l0.<java.lang.String: char[] value>,1354,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack15 = l0.<java.lang.String: char[] value>, 1354)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack16 = lengthof $stack15,1354,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack16 = lengthof $stack15, 1354)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack18 = (long) $stack16,1354,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack18 = (long) $stack16, 1354)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack19 = $stack18 - $stack17,1354,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack19 = $stack18 - $stack17, 1354)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack21 = $stack20 cmp $stack19,1354,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack21 = $stack20 cmp $stack19, 1354))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack47 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 60
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 60
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1354
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1354
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1354
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1354
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1354
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1354
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1354
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1354
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1354
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack19 = $stack18 - $stack17",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
					"line": 1354
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,68,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 68)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,151,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 151)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,163,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack32 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,253,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack32 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 253)) => Node(<java.lang.String: int length()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)) => Node(<java.lang.String: int length()>,$stack1 = l0.<java.lang.String: char[] value>,623,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)) => Node(<java.lang.String: int length()>,$stack2 = lengthof $stack1,623,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack33 = virtualinvoke $stack32.<java.lang.String: int length()>(),253,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack33 = virtualinvoke $stack32.<java.lang.String: int length()>(), 253)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,247,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 247)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = $stack31 + 1,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos = $stack31 + 1, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = endPos + 1,261,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos = endPos + 1, 261)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = endPos + 1,253,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, chr = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(endPos), 254))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack4 = words[0]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
					"line": 99
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 247
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 261
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 253
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 68
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 68
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 151
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 163
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 253
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": 623
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": 623
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 253
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack33 = virtualinvoke $stack32.<java.lang.String: int length()>()",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
					"line": 253
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,172,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 172)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack17 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,321,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack17 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 321)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,87,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 87)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack17 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,321,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack17 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 321))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 87
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 87
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 321
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 172
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 172
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 321
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack17 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
					"line": 321
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12),172,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(),133,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack4 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(),131,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack4 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 131)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack15 = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>(tableName), 48)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, endPos = virtualinvoke $stack27.<java.lang.String: int indexOf(int,int)>(34, $stack26), 154)) => Node(<java.lang.String: int indexOf(int,int)>,$stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2),1565,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, endPos = virtualinvoke $stack27.<java.lang.String: int indexOf(int,int)>(34, $stack26), 154)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>,endPos = virtualinvoke string.<java.lang.String: int indexOf(int,int)>(46, startPos),151,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>, endPos = virtualinvoke string.<java.lang.String: int indexOf(int,int)>(46, startPos), 151)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: java.lang.String substring(int,int)>,specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3),1969,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack47 = newarray (java.lang.String)[1],60,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack8 = l0.<java.lang.String: char[] value>,1969,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, $stack8 = l0.<java.lang.String: char[] value>, 1969))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack47 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 60
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 60
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1969
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 172
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 172
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 133
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 131
},{
	"class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
	"method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
	"method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": 1565
},{
	"class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
	"method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>",
	"line": 151
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1965
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1969
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String substring(int,int)>",
					"line": 1969
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>,$stack8 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,117,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack8 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 117)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>,$stack9 = $stack8 + 1,117,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack9 = $stack8 + 1, 117)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack9,117,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack9, 117)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 67)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,135,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,322,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 322)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),147,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,definition := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,string = definition,237,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, string = definition, 237)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,matcher = virtualinvoke $stack7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string),245,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, matcher = virtualinvoke $stack7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string), 245)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1),248,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1), 248)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 67)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String trim()>,$stack5 = l0,2878,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),147,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,definition := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,string = definition,237,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, string = definition, 237)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,matcher = virtualinvoke $stack7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string),245,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, matcher = virtualinvoke $stack7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string), 245)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1),248,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1), 248))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2878
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 147
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 237
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 245
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 248
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack8 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
					"line": 117
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
	"line": 117
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
	"line": 117
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
	"line": 117
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 135
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 322
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 147
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 237
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 245
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 248
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
					"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
					"line": 248
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = endPos,175,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = endPos, 175)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,294,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 294)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,296,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 296)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack20 = $stack19 + 1,297,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack20 = $stack19 + 1, 297)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack47 = newarray (java.lang.String)[1],60,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,247,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 247)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,296,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 296)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack20 = $stack19 + 1,297,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack20 = $stack19 + 1, 297)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack20),297,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack20), 297))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack47 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 60
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 60
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 247
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 296
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 297
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 297
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = endPos",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 175
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 175
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 294
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 296
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 297
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack20 = $stack19 + 1",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
					"line": 297
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>,$stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key),29,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack2 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>("CannotParseStringUnsupportedCommand"),398,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack2 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringUnsupportedCommand'), 398)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack19 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack2, $stack3),397,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack19 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack2, $stack3), 397)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,specialinvoke $stack1.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack19),397,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, specialinvoke $stack1.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack19), 397)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack20 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,397,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack20 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 397))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 76
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 397
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.Resources",
					"method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
					"line": 29
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.Resources",
	"method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
	"line": 29
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 398
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 397
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 397
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack1.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack19)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
					"line": 397
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,87,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 87)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,135,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,322,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 322)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),147,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,definition := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,string = definition,237,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, string = definition, 237)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,matcher = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string),239,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, matcher = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string), 239)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,$stack23 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1),242,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, $stack23 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1), 242)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack47 = newarray (java.lang.String)[1],60,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String trim()>,$stack5 = l0,2878,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),147,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,definition := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,string = definition,237,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, string = definition, 237)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,matcher = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string),239,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, matcher = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string), 239)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,$stack23 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1),242,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, $stack23 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1), 242))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack47 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 60
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 60
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2878
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 147
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 237
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 239
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 242
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 87
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 87
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 135
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 322
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 147
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 237
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 239
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 242
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack23 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
					"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
					"line": 242
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd),67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,$stack3 = l0.<java.lang.String: char[] value>,1106,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack3 = l0.<java.lang.String: char[] value>, 1106)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,$stack4 = lengthof $stack3,1106,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack4 = lengthof $stack3, 1106)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack47 = newarray (java.lang.String)[1],60,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,$stack2 = l1.<java.lang.String: char[] value>,1106,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack2 = l1.<java.lang.String: char[] value>, 1106)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,$stack5 = lengthof $stack2,1106,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack5 = lengthof $stack2, 1106))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack47 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 60
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 60
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": 1106
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": 1106
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": 1106
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": 1106
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack4 = lengthof $stack3",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
					"line": 1106
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,172,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 172)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,135,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,247,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 247)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = $stack31 + 1,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos = $stack31 + 1, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack50 = endPos + 1,260,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack50 = endPos + 1, 260)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,68,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 68)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,72,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 72)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,320,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 320)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack32 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,253,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack32 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 253)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,259,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 259)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack51 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,260,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack51 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 260))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 68
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 68
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 72
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 320
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 253
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 259
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 260
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 172
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 172
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 135
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 247
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 260
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack50 = endPos + 1",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
					"line": 260
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,172,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 172)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,135,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,322,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 322)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),147,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,definition := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,string = definition,237,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, string = definition, 237)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,matcher = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string),239,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, matcher = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string), 239)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,$stack6 = virtualinvoke matcher.<java.util.regex.Matcher: boolean matches()>(),241,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, $stack6 = virtualinvoke matcher.<java.util.regex.Matcher: boolean matches()>(), 241)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack9,117,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack9, 117)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String trim()>,$stack5 = l0,2878,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),147,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,definition := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,string = definition,237,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, string = definition, 237)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,matcher = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string),239,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, matcher = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string), 239)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,$stack6 = virtualinvoke matcher.<java.util.regex.Matcher: boolean matches()>(),241,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, $stack6 = virtualinvoke matcher.<java.util.regex.Matcher: boolean matches()>(), 241))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack9",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
					"line": 117
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
	"line": 117
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2878
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 147
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 237
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 239
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 241
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 172
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 172
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 135
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 322
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 147
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 237
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 239
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 241
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack6 = virtualinvoke matcher.<java.util.regex.Matcher: boolean matches()>()",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
					"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
					"line": 241
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,136,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 136)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>,charPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,345,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, endPos = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>(), 316)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>,charPos = charPos + 1,347,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, endPos = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>(), 316)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,endPos = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>(),316,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, endPos = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>(), 316)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),133,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,virtualinvoke constraint.<cz.startnet.utils.pgdiff.schema.PgConstraint: void setDefinition(java.lang.String)>($stack6),133,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke constraint.<cz.startnet.utils.pgdiff.schema.PgConstraint: void setDefinition(java.lang.String)>($stack6), 133)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 67)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String trim()>,$stack5 = l0,2878,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),133,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2878
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 133
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
					"line": 136
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 136
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>",
	"line": 345
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>",
	"line": 347
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 316
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 133
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 133
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke constraint.<cz.startnet.utils.pgdiff.schema.PgConstraint: void setDefinition(java.lang.String)>($stack6)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
					"line": 133
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack14 = newarray (java.lang.String)[1],114,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack15 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack14), 114)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack63 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack63 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" start pos: "),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' start pos: '), 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack64 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack63),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack64 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack63), 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" end pos: "),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' end pos: '), 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack67 = virtualinvoke $stack65.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack66),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack67 = virtualinvoke $stack65.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack66), 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack68 = virtualinvoke $stack67.<java.lang.StringBuilder: java.lang.String toString()>(),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack68 = virtualinvoke $stack67.<java.lang.StringBuilder: java.lang.String toString()>(), 273)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, specialinvoke $stack57.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($stack68, ex), 273)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2),80,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, specialinvoke $stack57.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($stack68, ex), 273) => (<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2), 80)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,word = l2[l4],49,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,247,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 247)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = $stack31 + 1,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos = $stack31 + 1, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = endPos + 1,261,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos = endPos + 1, 261)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = endPos + 1,253,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, chr = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(endPos), 254)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack66 = endPos + 1,273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack66 = endPos + 1, 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" end pos: "),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' end pos: '), 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack67 = virtualinvoke $stack65.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack66),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack67 = virtualinvoke $stack65.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack66), 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack68 = virtualinvoke $stack67.<java.lang.StringBuilder: java.lang.String toString()>(),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack68 = virtualinvoke $stack67.<java.lang.StringBuilder: java.lang.String toString()>(), 273)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, specialinvoke $stack57.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($stack68, ex), 273)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2),80,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, specialinvoke $stack57.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($stack68, ex), 273) => (<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2), 80))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "word = l2[l4]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
					"line": 49
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 49
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 247
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 261
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 253
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>",
	"line": 80
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack14 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
					"line": 114
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 114
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>",
	"line": 80
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2)",
				"location": {
					"file": "",
					"class": "java.lang.RuntimeException",
					"method": "<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>",
					"line": 80
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,154,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 154)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,135,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,247,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 247)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = $stack31 + 1,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos = $stack31 + 1, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = endPos + 1,253,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, chr = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(endPos), 254)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,chr = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(endPos),254,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, chr = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(endPos), 254)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,69,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 69)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,72,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 72)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,320,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 320)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack32 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,253,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack32 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 253)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,254,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 254))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 69
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 69
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 72
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 320
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 253
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 254
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 154
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 154
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 135
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 247
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 253
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 254
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "chr = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(endPos)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
					"line": 254
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack24 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack24 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 67)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,151,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 151)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,163,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,320,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 320)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack20 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,322,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack20 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 322)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,66,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 66)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,72,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 72)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,320,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 320)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack20 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,322,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack20 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 322))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 66
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 66
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 72
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 320
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 322
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack24 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 151
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 163
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 320
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 322
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack20 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
					"line": 322
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12),172,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(),133,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack4 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(),131,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack4 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 131)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack15 = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>(tableName), 48)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)) => Node(<java.lang.String: int length()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)) => Node(<java.lang.String: int length()>,$stack1 = l0.<java.lang.String: char[] value>,623,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,71,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 71)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,72,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 72)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,296,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 296)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,401,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 401)) => Node(<java.lang.String: int length()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)) => Node(<java.lang.String: int length()>,$stack1 = l0.<java.lang.String: char[] value>,623,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)) => Node(<java.lang.String: int length()>,$stack2 = lengthof $stack1,623,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 71
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 71
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 72
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 296
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 401
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": 623
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": 623
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 172
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 172
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 133
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 131
},{
	"class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
	"method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
	"method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": 623
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: int length()>",
					"line": 623
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,word = l2[l4],49,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,135,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,247,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 247)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = $stack31 + 1,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos = $stack31 + 1, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = endPos + 1,253,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, chr = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(endPos), 254)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = endPos + 1,261,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos = endPos + 1, 261)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack45 = newarray (java.lang.String)[2],57,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,247,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 247)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = $stack31 + 1,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos = $stack31 + 1, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = endPos + 1,261,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos = endPos + 1, 261))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack45 = newarray (java.lang.String)[2]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 57
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 57
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 247
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 261
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "word = l2[l4]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
					"line": 49
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 49
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 135
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 247
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 253
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 261
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "endPos = endPos + 1",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
					"line": 261
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,155,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 155)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,283,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 283)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,escape#23 = escape#23 + 1,285,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos#24 = virtualinvoke $stack24.<java.lang.String: char charAt(int)>(escape#23), 286)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack7 = newarray (java.lang.String)[1],107,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,l2 = words,46,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,word = l2[l4],49,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,247,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 247)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = $stack31 + 1,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos = $stack31 + 1, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack38 = endPos + 1,278,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack38 = endPos + 1, 278)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack38,278,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack38, 278)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,283,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 283)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,escape#23 = escape#23 + 1,285,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos#24 = virtualinvoke $stack24.<java.lang.String: char charAt(int)>(escape#23), 286))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack7 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
					"line": 107
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 107
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 46
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 49
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 247
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 278
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 278
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 283
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 285
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 155
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 155
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 283
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 285
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "escape#23 = escape#23 + 1",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
					"line": 285
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,136,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 136)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos#37 = virtualinvoke $stack13.<java.lang.String: java.lang.String substring(int,int)>($stack12, escape#23),300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(),89,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack47 = newarray (java.lang.String)[1],60,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos#37 = virtualinvoke $stack13.<java.lang.String: java.lang.String substring(int,int)>($stack12, escape#23),300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(),89,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void setTablespace(java.lang.String)>($stack33),89,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void setTablespace(java.lang.String)>($stack33), 89))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack47 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 60
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 60
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 89
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 89
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
					"line": 136
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 136
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 89
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>()",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 89
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,66,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 66)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,151,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 151)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,163,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack32 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,253,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack32 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 253)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,259,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 259)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,72,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 72)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,320,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 320)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack32 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,253,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack32 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 253)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,259,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 259))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 72
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 72
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 320
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 253
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 259
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 66
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 66
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 151
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 163
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 253
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 259
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
					"line": 259
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack33,156,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack33, 156)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos#37 = virtualinvoke $stack13.<java.lang.String: java.lang.String substring(int,int)>($stack12, escape#23),300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(),89,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void setTablespace(java.lang.String)>,tablespace := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void setTablespace(java.lang.String)>($stack33), 89)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void setTablespace(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String tablespace> = tablespace,264,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void setTablespace(java.lang.String)>($stack33), 89) => (<cz.startnet.utils.pgdiff.schema.PgTable: void setTablespace(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String tablespace> = tablespace, 264)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos#37 = virtualinvoke $stack13.<java.lang.String: java.lang.String substring(int,int)>($stack12, escape#23),300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(),89,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void setTablespace(java.lang.String)>,tablespace := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void setTablespace(java.lang.String)>($stack33), 89)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void setTablespace(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String tablespace> = tablespace,264,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void setTablespace(java.lang.String)>($stack33), 89) => (<cz.startnet.utils.pgdiff.schema.PgTable: void setTablespace(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String tablespace> = tablespace, 264))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack4 = words[0]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
					"line": 99
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 89
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgTable",
	"method": "<cz.startnet.utils.pgdiff.schema.PgTable: void setTablespace(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgTable",
	"method": "<cz.startnet.utils.pgdiff.schema.PgTable: void setTablespace(java.lang.String)>",
	"line": 264
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack33",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 156
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 156
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 89
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgTable",
	"method": "<cz.startnet.utils.pgdiff.schema.PgTable: void setTablespace(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgTable",
	"method": "<cz.startnet.utils.pgdiff.schema.PgTable: void setTablespace(java.lang.String)>",
	"line": 264
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String tablespace> = tablespace",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.schema.PgTable",
					"method": "<cz.startnet.utils.pgdiff.schema.PgTable: void setTablespace(java.lang.String)>",
					"line": 264
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack7 = newarray (java.lang.String)[1],107,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,l2 = words,46,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,word = l2[l4],49,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,294,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 294)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack7 = newarray (java.lang.String)[1],107,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,l2 = words,46,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,word = l2[l4],49,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,247,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 247)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = $stack31 + 1,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos = $stack31 + 1, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack38 = endPos + 1,278,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack38 = endPos + 1, 278)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack38,278,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack38, 278)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,294,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 294))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack7 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
					"line": 107
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 107
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 46
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 49
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 247
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 278
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 278
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 294
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack7 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
					"line": 107
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 107
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 46
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 49
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 294
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
					"line": 294
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack11 = virtualinvoke $stack10.<java.lang.String: java.lang.String substring(int,int)>($stack9, endPos),172,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack11 = virtualinvoke $stack10.<java.lang.String: java.lang.String substring(int,int)>($stack9, endPos), 172)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12), 172)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12), 172) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12), 172) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.Character: int toLowerCase(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12), 172) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack72 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l5), 2576)) => Node(<java.lang.Character: int toLowerCase(int)>,$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: int toLowerCase(int)>(l0),6338,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12), 172) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack72 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l5), 2576)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack47 = newarray (java.lang.String)[1],60,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd),67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l10 = l6[$stack30],1357,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l10 = l6[$stack30], 1357)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10),1367,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10), 1367)) => Node(<java.lang.Character: char toLowerCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack34 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l12), 1376)) => Node(<java.lang.Character: int toLowerCase(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12), 172) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack72 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l5), 2576)) => Node(<java.lang.Character: int toLowerCase(int)>,$stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0),6338,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12), 172) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack72 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l5), 2576) => (<java.lang.Character: int toLowerCase(int)>, $stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0), 6338))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack47 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 60
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 60
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1346
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1357
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1367
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: char toLowerCase(char)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int toLowerCase(int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int toLowerCase(int)>",
	"line": 6338
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack11 = virtualinvoke $stack10.<java.lang.String: java.lang.String substring(int,int)>($stack9, endPos)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 172
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 172
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int toLowerCase(int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int toLowerCase(int)>",
	"line": 6338
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: int toLowerCase(int)>(l0)",
				"location": {
					"file": "",
					"class": "java.lang.Character",
					"method": "<java.lang.Character: int toLowerCase(int)>",
					"line": 6338
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd),67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l10 = l6[$stack30],1357,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l10 = l6[$stack30], 1357)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10),1367,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10), 1367)) => Node(<java.lang.Character: char toLowerCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack34 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l12), 1376)) => Node(<java.lang.Character: char toLowerCase(char)>,$stack1 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l0),6309,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12), 172) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack17 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l4), 2581) => (<java.lang.Character: char toLowerCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l0), 6309)) => Node(<java.lang.Character: char toLowerCase(char)>,$stack2 = (char) $stack1,6309,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack34 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l12), 1376)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack34 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l12),1376,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack34 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l12), 1376)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack45 = newarray (java.lang.String)[2],57,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd),67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l6 = l0.<java.lang.String: char[] value>,1346,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l6 = l0.<java.lang.String: char[] value>, 1346)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l10 = l6[$stack30],1357,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l10 = l6[$stack30], 1357)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10),1367,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, l12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(l10), 1367)) => Node(<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>,$stack34 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l12),1376,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67) => (<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>, $stack9 = virtualinvoke l0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, l1, 0, $stack8), 1109) => (<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>, $stack34 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l12), 1376))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack45 = newarray (java.lang.String)[2]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 57
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 57
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1346
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1357
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1367
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1376
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1346
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1357
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1367
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: char toLowerCase(char)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: char toLowerCase(char)>",
	"line": 6309
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: char toLowerCase(char)>",
	"line": 6309
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
	"line": 1376
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack34 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l12)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>",
					"line": 1376
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,135,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack20 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,397,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack20 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 397)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack17 = $stack20 + 20,400,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack17 = $stack20 + 20, 400)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: java.lang.String substring(int,int)>,specialinvoke $stack13.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3),1967,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack13.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3), 1967)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,66,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 66)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,72,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 72)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,296,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 296)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,401,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 401)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack17 = virtualinvoke $stack16.<java.lang.String: int length()>(),401,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack17 = virtualinvoke $stack16.<java.lang.String: int length()>(), 401)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: java.lang.String substring(int,int)>,specialinvoke $stack13.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3),1967,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack13.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3), 1967))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 66
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 66
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 72
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 296
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 401
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 401
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1965
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1967
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
					"line": 135
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 135
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 397
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 400
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1965
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1967
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack13.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l3)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String substring(int,int)>",
					"line": 1967
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,135,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,322,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 322)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),147,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,definition := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,string = definition,237,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, string = definition, 237)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,matcher = virtualinvoke $stack7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string),245,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, matcher = virtualinvoke $stack7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string), 245)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1),248,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1), 248)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String trim()>,l3 = l0.<java.lang.String: char[] value>,2870,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325) => (<java.lang.String: java.lang.String trim()>, l3 = l0.<java.lang.String: char[] value>, 2870)) => Node(<java.lang.String: java.lang.String trim()>,$stack16 = l3[l2],2875,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325) => (<java.lang.String: java.lang.String trim()>, $stack16 = l3[l2], 2875)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,87,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 87)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String trim()>,l3 = l0.<java.lang.String: char[] value>,2870,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325) => (<java.lang.String: java.lang.String trim()>, l3 = l0.<java.lang.String: char[] value>, 2870)) => Node(<java.lang.String: java.lang.String trim()>,$stack16 = l3[l2],2875,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325) => (<java.lang.String: java.lang.String trim()>, $stack16 = l3[l2], 2875))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 87
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 87
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2870
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2875
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack4 = words[0]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
					"line": 99
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 135
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 322
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 147
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 237
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 245
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 248
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2870
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2875
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack16 = l3[l2]",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String trim()>",
					"line": 2875
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSecondObjectName(java.lang.String)>,names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name),41,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack13 = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSecondObjectName(java.lang.String)>(parsedString), 111) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSecondObjectName(java.lang.String)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 41)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSecondObjectName(java.lang.String)>,$stack5 = names[$stack4],43,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack13 = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSecondObjectName(java.lang.String)>(parsedString), 111)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack13 = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSecondObjectName(java.lang.String)>(parsedString),111,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack13 = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSecondObjectName(java.lang.String)>(parsedString), 111)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,schemaName = $stack13,112,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, schemaName = $stack13, 112)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>,schemaName := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),215,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 215)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, inheritedTable = virtualinvoke $stack11.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(tableName), 215)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, inheritedTable = virtualinvoke $stack11.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(tableName), 215) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, rel = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>(name), 292)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List rels>,275,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, inheritedTable = virtualinvoke $stack11.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(tableName), 215) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, rel = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>(name), 292) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List rels>, 275)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),275,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, inheritedTable = virtualinvoke $stack11.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(tableName), 215) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, rel = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>(name), 292) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 275)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, inheritedTable = virtualinvoke $stack11.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(tableName), 215) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, rel = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>(name), 292) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>,rel = (cz.startnet.utils.pgdiff.schema.PgRelation) $stack7,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, inheritedTable = virtualinvoke $stack11.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(tableName), 215) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, rel = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>(name), 292)) => Node(<cz.startnet.utils.pgdiff.schema.PgRelation: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgRelation,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack7 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 134)) => Node(<cz.startnet.utils.pgdiff.schema.PgRelation: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgRelation: java.lang.String name>,206,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack7 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 134)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>,$stack8 = virtualinvoke rel.<cz.startnet.utils.pgdiff.schema.PgRelation: java.lang.String getName()>(),276,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, inheritedTable = virtualinvoke $stack11.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(tableName), 215) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, rel = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>(name), 292) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>, $stack8 = virtualinvoke rel.<cz.startnet.utils.pgdiff.schema.PgRelation: java.lang.String getName()>(), 276)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack49 = "[",79,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word), 79)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack49 = '['",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 79
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 79
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 984
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
					"method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSecondObjectName(java.lang.String)>",
					"line": 41
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
	"method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSecondObjectName(java.lang.String)>",
	"line": 41
},{
	"class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
	"method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSecondObjectName(java.lang.String)>",
	"line": 43
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 111
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 112
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgTable",
	"method": "<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgTable",
	"method": "<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>",
	"line": 215
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgSchema",
	"method": "<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgSchema",
	"method": "<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgSchema",
	"method": "<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>",
	"line": 275
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgSchema",
	"method": "<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>",
	"line": 275
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgSchema",
	"method": "<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>",
	"line": 281
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgSchema",
	"method": "<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>",
	"line": 281
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgRelation",
	"method": "<cz.startnet.utils.pgdiff.schema.PgRelation: java.lang.String getName()>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgRelation",
	"method": "<cz.startnet.utils.pgdiff.schema.PgRelation: java.lang.String getName()>",
	"line": 206
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgSchema",
	"method": "<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>",
	"line": 276
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 984
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l4 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 984
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>,$stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key),29,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack16 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>("CannotParseStringExpectedString"),296,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack16 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedString'), 296)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>,$stack1 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,117,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack1 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 117)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,72,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 72)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,296,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 296))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
					"line": 117
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
	"line": 117
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 72
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 296
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.Resources",
					"method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
					"line": 29
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.Resources",
	"method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
	"line": 29
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 296
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack16 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedString')",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
					"line": 296
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,283,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 283)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack45 = newarray (java.lang.String)[2],57,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,247,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 247)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = $stack31 + 1,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos = $stack31 + 1, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack38 = endPos + 1,278,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack38 = endPos + 1, 278)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack38,278,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack38, 278)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,283,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 283))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack45 = newarray (java.lang.String)[2]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 57
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 57
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 247
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 278
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 278
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 283
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 76
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 283
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
					"line": 283
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,172,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 172)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,135,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,322,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 322)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,118,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 118)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
					"line": 118
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
	"line": 118
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 172
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 172
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 135
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 322
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
					"line": 325
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>,$stack5 = names[$stack4],29,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack15 = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>(tableName), 48)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,tableName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>(parsedString),109,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, tableName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>(parsedString), 109)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>,tableName := @parameter1: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, inheritedTable = virtualinvoke $stack11.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(tableName), 215)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, inheritedTable = virtualinvoke $stack11.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(tableName), 215) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, rel = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>(name), 292)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l5 = l2.<java.lang.String: char[] value>,985,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74) => (<java.lang.String: boolean equals(java.lang.Object)>, l5 = l2.<java.lang.String: char[] value>, 985)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack13 = l5[l6],988,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack13 = l5[l6], 988)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack51 = "]",75,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word), 75)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack14 = l4[l6],988,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack14 = l4[l6], 988))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack51 = ']'",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 75
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 75
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 984
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 988
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack5 = names[$stack4]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
					"method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>",
					"line": 29
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
	"method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>",
	"line": 29
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 109
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgTable",
	"method": "<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgSchema",
	"method": "<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgSchema",
	"method": "<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 981
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 985
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 988
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack13 = l5[l6]",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 988
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack13 = virtualinvoke $stack12.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(),112,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack13 = virtualinvoke $stack12.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 112)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,schemaName = $stack13,112,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, schemaName = $stack13, 112)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>,schemaName := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>,$stack11 = virtualinvoke $stack10.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName),215,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, $stack11 = virtualinvoke $stack10.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 215)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, inheritedTable = virtualinvoke $stack11.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(tableName), 215)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgSchema,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, inheritedTable = virtualinvoke $stack11.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(tableName), 215) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, rel = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>(name), 292)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>,$stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List rels>,275,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, inheritedTable = virtualinvoke $stack11.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(tableName), 215) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, rel = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>(name), 292) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>, $stack4 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List rels>, 275)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>,l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(),275,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, inheritedTable = virtualinvoke $stack11.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(tableName), 215) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, rel = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>(name), 292) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>, l2 = interfaceinvoke $stack4.<java.util.List: java.util.Iterator iterator()>(), 275)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, inheritedTable = virtualinvoke $stack11.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(tableName), 215) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, rel = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>(name), 292) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 281)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>,rel = (cz.startnet.utils.pgdiff.schema.PgRelation) $stack7,281,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, inheritedTable = virtualinvoke $stack11.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(tableName), 215) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, rel = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>(name), 292)) => Node(<cz.startnet.utils.pgdiff.schema.PgRelation: java.lang.String getName()>,this := @this: cz.startnet.utils.pgdiff.schema.PgRelation,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack7 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 134)) => Node(<cz.startnet.utils.pgdiff.schema.PgRelation: java.lang.String getName()>,$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgRelation: java.lang.String name>,206,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack7 = virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String getName()>(), 134)) => Node(<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>,$stack8 = virtualinvoke rel.<cz.startnet.utils.pgdiff.schema.PgRelation: java.lang.String getName()>(),276,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>(schemaName, tableName), 113) => (<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>, inheritedTable = virtualinvoke $stack11.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>(tableName), 215) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>, rel = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>(name), 292) => (<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>, $stack8 = virtualinvoke rel.<cz.startnet.utils.pgdiff.schema.PgRelation: java.lang.String getName()>(), 276)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = l3 + -1,987,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack12 = l3, 987)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack51 = "]",75,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word), 75)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = l3 + -1,987,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack12 = l3, 987))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack51 = ']'",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 75
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 75
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 987
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack13 = virtualinvoke $stack12.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>()",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
					"line": 112
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 112
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 112
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgTable",
	"method": "<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgTable",
	"method": "<cz.startnet.utils.pgdiff.schema.PgTable: void addInherits(java.lang.String,java.lang.String)>",
	"line": 215
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgSchema",
	"method": "<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgTable getTable(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgSchema",
	"method": "<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgSchema",
	"method": "<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>",
	"line": 275
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgSchema",
	"method": "<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>",
	"line": 275
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgSchema",
	"method": "<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>",
	"line": 281
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgSchema",
	"method": "<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>",
	"line": 281
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgRelation",
	"method": "<cz.startnet.utils.pgdiff.schema.PgRelation: java.lang.String getName()>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgRelation",
	"method": "<cz.startnet.utils.pgdiff.schema.PgRelation: java.lang.String getName()>",
	"line": 206
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgSchema",
	"method": "<cz.startnet.utils.pgdiff.schema.PgSchema: cz.startnet.utils.pgdiff.schema.PgRelation getRelation(java.lang.String)>",
	"line": 276
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 987
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l3 = l3 + -1",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 987
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack33,156,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack33, 156)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,400,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 400)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: void <init>(char[],int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,specialinvoke $stack17.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2),192,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, specialinvoke $stack17.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2), 192)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 67)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: void <init>(char[],int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,specialinvoke $stack17.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2),192,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, specialinvoke $stack17.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2), 192))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 192
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack33",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 156
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 156
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 400
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 192
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack17.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: void <init>(char[],int,int)>",
					"line": 192
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,word = l2[l4],49,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,135,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,322,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 322)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),147,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,definition := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,string = definition,237,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, string = definition, 237)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,matcher = virtualinvoke $stack7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string),245,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, matcher = virtualinvoke $stack7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string), 245)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1),248,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1), 248)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String trim()>,l3 = l0.<java.lang.String: char[] value>,2870,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325) => (<java.lang.String: java.lang.String trim()>, l3 = l0.<java.lang.String: char[] value>, 2870)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String trim()>,l3 = l0.<java.lang.String: char[] value>,2870,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325) => (<java.lang.String: java.lang.String trim()>, l3 = l0.<java.lang.String: char[] value>, 2870))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack4 = words[0]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
					"line": 99
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2870
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "word = l2[l4]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
					"line": 49
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 49
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 135
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 322
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 147
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 237
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 245
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 248
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2870
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l3 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String trim()>",
					"line": 2870
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,endPos = endPos + 1,162,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result#5 = virtualinvoke $stack14.<java.lang.String: char charAt(int)>(endPos), 163)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = endPos,175,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = endPos, 175)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>,charPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,345,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, endPos = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>(), 316)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>,charPos = charPos + 1,347,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, endPos = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>(), 316)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,endPos = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>(),316,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, endPos = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>(), 316)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),147,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,definition := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,string = definition,237,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, string = definition, 237)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,matcher = virtualinvoke $stack7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string),245,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, matcher = virtualinvoke $stack7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string), 245)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,word = l2[l4],49,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String trim()>,$stack5 = l0,2878,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),147,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,definition := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,string = definition,237,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, string = definition, 237)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,matcher = virtualinvoke $stack7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string),245,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, matcher = virtualinvoke $stack7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string), 245))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "word = l2[l4]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
					"line": 49
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 49
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2878
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 147
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 237
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 245
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "endPos = endPos + 1",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 162
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 162
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 175
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>",
	"line": 345
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>",
	"line": 347
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 316
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 147
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 237
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 245
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "matcher = virtualinvoke $stack7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
					"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
					"line": 245
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,l2 = words,46,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,word = l2[l4],49,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,398,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 398)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack6 = $stack5 + 1,399,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack6 = $stack5 + 1, 399)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack13), 88)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack13), 88) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,398,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 398)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack6 = $stack5 + 1,399,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack6 = $stack5 + 1, 399)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack13), 88)) => Node(<java.lang.Integer: java.lang.Integer valueOf(int)>,specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0),832,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($stack13), 88) => (<java.lang.Integer: java.lang.Integer valueOf(int)>, specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0), 832))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack4 = words[0]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
					"line": 99
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 398
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 399
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
	"line": 832
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l2 = words",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
					"line": 46
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 46
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 49
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 398
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 399
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
	"line": -1
},{
	"class": "java.lang.Integer",
	"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
	"line": 832
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack1.<java.lang.Integer: void <init>(int)>(l0)",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<java.lang.Integer: java.lang.Integer valueOf(int)>",
					"line": 832
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,135,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 135)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,320,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 320)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,71,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 71)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,72,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 72)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,320,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 320))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 71
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 71
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 72
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 320
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
					"line": 135
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 135
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 320
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
					"line": 320
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,69,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 69)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,151,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 151)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,163,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>,$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,348,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, endPos = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>(), 316) => (<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 348)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,68,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 68)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,72,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 72)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,162,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,163,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,347,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, endPos = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>(), 316) => (<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 347)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>,$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,348,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, endPos = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>(), 316) => (<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 348))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 68
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 68
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 72
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 162
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 163
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>",
	"line": 347
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>",
	"line": 348
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 69
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 69
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 151
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 163
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>",
	"line": 348
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>",
					"line": 348
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12),172,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(),133,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack4 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(),131,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack4 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 131)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack15 = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>(tableName), 48)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, endPos = virtualinvoke $stack27.<java.lang.String: int indexOf(int,int)>(34, $stack26), 154)) => Node(<java.lang.String: int indexOf(int,int)>,$stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2),1565,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, endPos = virtualinvoke $stack27.<java.lang.String: int indexOf(int,int)>(34, $stack26), 154)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>,endPos = virtualinvoke string.<java.lang.String: int indexOf(int,int)>(46, startPos),151,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>, endPos = virtualinvoke string.<java.lang.String: int indexOf(int,int)>(46, startPos), 151)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 64
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1965
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "result = virtualinvoke $stack11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack12)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 172
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 172
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 133
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 131
},{
	"class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
	"method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getObjectName(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
	"method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(int,int)>",
	"line": 1565
},{
	"class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
	"method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>",
	"line": 151
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1965
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l3 = l2 - l1",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String substring(int,int)>",
					"line": 1965
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,88,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 88)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,135,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,322,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 322)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),147,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,definition := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,string = definition,237,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, string = definition, 237)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,matcher = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string),239,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, matcher = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string), 239)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack7 = newarray (java.lang.String)[1],107,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,l2 = words,46,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,word = l2[l4],49,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String trim()>,$stack5 = l0,2878,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),147,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,definition := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,string = definition,237,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, string = definition, 237)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,matcher = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string),239,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, matcher = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string), 239))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack7 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
					"line": 107
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 107
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 46
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 49
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2878
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 147
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 237
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 239
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 88
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 88
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 135
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 322
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 147
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 237
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 239
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "matcher = virtualinvoke $stack4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
					"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
					"line": 239
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,68,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 68)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,151,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 151)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,163,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack32 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,253,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack32 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 253)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack24 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,286,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack24 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 286)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack13 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack13 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 300)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack7 = newarray (java.lang.String)[1],107,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,l2 = words,46,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,word = l2[l4],49,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack7 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
					"line": 107
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 107
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 46
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 49
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 68
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 68
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 151
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 163
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 253
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 286
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack13 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
					"line": 300
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,87,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 87)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack20 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,397,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack20 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 397)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack17 = $stack20 + 20,400,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack17 = $stack20 + 20, 400)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack5 = $stack4 - l3,204,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack5 = $stack4 - l3, 204)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,72,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 72)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,296,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 296)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,401,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 401)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack17 = virtualinvoke $stack16.<java.lang.String: int length()>(),401,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack17 = virtualinvoke $stack16.<java.lang.String: int length()>(), 401)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack5 = $stack4 - l3,204,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack5 = $stack4 - l3, 204))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 72
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 72
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 296
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 401
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 401
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1965
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 204
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 87
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 87
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 397
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 400
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1965
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 204
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack5 = $stack4 - l3",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: void <init>(char[],int,int)>",
					"line": 204
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>,$stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key),29,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack57 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>("CreateTableUniqueNotSupported"),62,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack57 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CreateTableUniqueNotSupported'), 62)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>,msg := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86) => (<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(msg), 33)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1),62,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86) => (<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(msg), 33) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>,$stack1 = <cz.startnet.utils.pgdiff.Resources: java.util.ResourceBundle RESOURCE_BUNDLE>,29,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87) => (<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>, $stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key), 29)) => Node(<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>,$stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key),29,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack2 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>("CannotParseStringUnsupportedCommand"),398,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack2 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringUnsupportedCommand'), 398)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack19 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack2, $stack3),397,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack19 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack2, $stack3), 397)) => Node(<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>,msg := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86) => (<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(msg), 33)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1),62,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86) => (<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(msg), 33) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = <cz.startnet.utils.pgdiff.Resources: java.util.ResourceBundle RESOURCE_BUNDLE>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.Resources",
					"method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
					"line": 29
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.Resources",
	"method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
	"line": 29
},{
	"class": "cz.startnet.utils.pgdiff.Resources",
	"method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
	"line": 29
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 398
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 397
},{
	"class": "cz.startnet.utils.pgdiff.parsers.ParserException",
	"method": "<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String)>",
	"line": 62
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.Resources",
					"method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
					"line": 29
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.Resources",
	"method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
	"line": 29
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 62
},{
	"class": "cz.startnet.utils.pgdiff.parsers.ParserException",
	"method": "<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String)>",
	"line": 62
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1)",
				"location": {
					"file": "",
					"class": "java.lang.RuntimeException",
					"method": "<java.lang.RuntimeException: void <init>(java.lang.String)>",
					"line": 62
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,l2 = words,46,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,word = l2[l4],49,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,283,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 283)) => Node(<java.lang.String: char charAt(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack6 = virtualinvoke $stack5.<java.lang.String: char charAt(int)>($stack4), 118)) => Node(<java.lang.String: char charAt(int)>,specialinvoke $stack2.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1),658,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack6 = virtualinvoke $stack5.<java.lang.String: char charAt(int)>($stack4), 118) => (<java.lang.String: char charAt(int)>, specialinvoke $stack2.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1), 658)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,247,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 247)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = $stack31 + 1,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos = $stack31 + 1, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack38 = endPos + 1,278,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack38 = endPos + 1, 278)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack38,278,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack38, 278)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,283,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 283)) => Node(<java.lang.String: char charAt(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack6 = virtualinvoke $stack5.<java.lang.String: char charAt(int)>($stack4), 118)) => Node(<java.lang.String: char charAt(int)>,specialinvoke $stack2.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1),658,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack6 = virtualinvoke $stack5.<java.lang.String: char charAt(int)>($stack4), 118) => (<java.lang.String: char charAt(int)>, specialinvoke $stack2.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1), 658))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 76
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 247
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 278
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 278
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 283
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: char charAt(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: char charAt(int)>",
	"line": 658
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l2 = words",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
					"line": 46
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 46
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 49
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 283
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: char charAt(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: char charAt(int)>",
	"line": 658
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack2.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: char charAt(int)>",
					"line": 658
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,87,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 87)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,135,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,322,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 322)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),147,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,definition := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,string = definition,237,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, string = definition, 237)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,matcher = virtualinvoke $stack7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string),245,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, matcher = virtualinvoke $stack7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(string), 245)) => Node(<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>,$stack19 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1),248,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147) => (<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>, $stack19 = virtualinvoke matcher.<java.util.regex.Matcher: java.lang.String group(int)>(1), 248)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack4 = l0.<java.lang.String: char[] value>,1962,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, $stack4 = l0.<java.lang.String: char[] value>, 1962)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack5 = lengthof $stack4,1962,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, $stack5 = lengthof $stack4, 1962)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack45 = newarray (java.lang.String)[2],57,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack4 = l0.<java.lang.String: char[] value>,1962,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, $stack4 = l0.<java.lang.String: char[] value>, 1962)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack5 = lengthof $stack4,1962,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, $stack5 = lengthof $stack4, 1962))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack45 = newarray (java.lang.String)[2]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 57
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 57
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1962
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1962
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 87
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 87
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 135
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 322
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 147
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 237
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 245
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgColumn",
	"method": "<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>",
	"line": 248
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1962
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1962
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack5 = lengthof $stack4",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String substring(int,int)>",
					"line": 1962
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = $stack14,48,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = $stack14, 48)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void setWith(java.lang.String)>,this := @this: cz.startnet.utils.pgdiff.schema.PgTable,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void setWith(java.lang.String)>('OIDS=false'), 78)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void setWith(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String 'with'> = with,237,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void setWith(java.lang.String)>('OIDS=false'), 78) => (<cz.startnet.utils.pgdiff.schema.PgTable: void setWith(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String 'with'> = with, 237)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,87,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 87)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String trim()>,$stack5 = l0,2878,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack40 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),86,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack40 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 86)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void setWith(java.lang.String)>,with := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void setWith(java.lang.String)>('OIDS=false'), 78) => (<cz.startnet.utils.pgdiff.schema.PgTable: void setWith(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String 'with'> = with, 237)) => Node(<cz.startnet.utils.pgdiff.schema.PgTable: void setWith(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String 'with'> = with,237,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void setWith(java.lang.String)>('OIDS=false'), 78) => (<cz.startnet.utils.pgdiff.schema.PgTable: void setWith(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String 'with'> = with, 237))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 87
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 87
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2878
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 86
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgTable",
	"method": "<cz.startnet.utils.pgdiff.schema.PgTable: void setWith(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgTable",
	"method": "<cz.startnet.utils.pgdiff.schema.PgTable: void setWith(java.lang.String)>",
	"line": 237
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "table = $stack14",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 48
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 48
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgTable",
	"method": "<cz.startnet.utils.pgdiff.schema.PgTable: void setWith(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgTable",
	"method": "<cz.startnet.utils.pgdiff.schema.PgTable: void setWith(java.lang.String)>",
	"line": 237
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "this.<cz.startnet.utils.pgdiff.schema.PgTable: java.lang.String 'with'> = with",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.schema.PgTable",
					"method": "<cz.startnet.utils.pgdiff.schema.PgTable: void setWith(java.lang.String)>",
					"line": 237
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,endPos = endPos + 1,162,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, result#5 = virtualinvoke $stack14.<java.lang.String: char charAt(int)>(endPos), 163)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = endPos,175,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = endPos, 175)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack63 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack63 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" start pos: "),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack62 = virtualinvoke $stack61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' start pos: '), 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack64 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack63),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack64 = virtualinvoke $stack62.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack63), 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" end pos: "),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' end pos: '), 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack67 = virtualinvoke $stack65.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack66),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack67 = virtualinvoke $stack65.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack66), 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack68 = virtualinvoke $stack67.<java.lang.StringBuilder: java.lang.String toString()>(),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack68 = virtualinvoke $stack67.<java.lang.StringBuilder: java.lang.String toString()>(), 273)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, specialinvoke $stack57.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($stack68, ex), 273)) => Node(<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, specialinvoke $stack57.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($stack68, ex), 273) => (<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2), 80)) => Node(<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2),84,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, specialinvoke $stack57.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($stack68, ex), 273) => (<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2), 80) => (<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2), 84)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,l2 = words,46,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,word = l2[l4],49,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,247,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 247)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = $stack31 + 1,251,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos = $stack31 + 1, 251)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = endPos + 1,261,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos = endPos + 1, 261)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos = endPos + 1,253,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, chr = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(endPos), 254)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack66 = endPos + 1,273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack66 = endPos + 1, 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" end pos: "),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' end pos: '), 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack67 = virtualinvoke $stack65.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack66),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack67 = virtualinvoke $stack65.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack66), 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack68 = virtualinvoke $stack67.<java.lang.StringBuilder: java.lang.String toString()>(),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack68 = virtualinvoke $stack67.<java.lang.StringBuilder: java.lang.String toString()>(), 273)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, specialinvoke $stack57.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($stack68, ex), 273)) => Node(<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, specialinvoke $stack57.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($stack68, ex), 273) => (<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2), 80)) => Node(<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2),84,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, specialinvoke $stack57.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($stack68, ex), 273) => (<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2), 80) => (<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2), 84))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = words",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
					"line": 46
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 46
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 49
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 247
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 251
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 261
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 253
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>",
	"line": 84
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "endPos = endPos + 1",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 162
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 162
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 175
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>",
	"line": 84
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>(l1, l2)",
				"location": {
					"file": "",
					"class": "java.lang.Exception",
					"method": "<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>",
					"line": 84
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,172,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 172)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,283,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, escape#23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 283)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,endPos#24 = virtualinvoke $stack24.<java.lang.String: char charAt(int)>(escape#23),286,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, endPos#24 = virtualinvoke $stack24.<java.lang.String: char charAt(int)>(escape#23), 286)) => Node(<java.lang.Character: boolean isWhitespace(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)) => Node(<java.lang.Character: boolean isWhitespace(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118) => (<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)) => Node(<java.lang.Character: boolean isWhitespace(int)>,$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: boolean isWhitespace(int)>(l0),6789,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118) => (<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)) => Node(<java.lang.Character: boolean isWhitespace(char)>,$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0),6757,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack47 = newarray (java.lang.String)[1],60,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd),69,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd), 69)) => Node(<java.lang.Character: boolean isWhitespace(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)) => Node(<java.lang.Character: boolean isWhitespace(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118) => (<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)) => Node(<java.lang.Character: boolean isWhitespace(int)>,$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: boolean isWhitespace(int)>(l0),6789,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118) => (<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)) => Node(<java.lang.Character: boolean isWhitespace(char)>,$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0),6757,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack47 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 60
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 60
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 69
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: boolean isWhitespace(char)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: boolean isWhitespace(int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: boolean isWhitespace(int)>",
	"line": 6789
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: boolean isWhitespace(char)>",
	"line": 6757
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 172
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 172
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 283
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 286
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: boolean isWhitespace(char)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: boolean isWhitespace(int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: boolean isWhitespace(int)>",
	"line": 6789
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: boolean isWhitespace(char)>",
	"line": 6757
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0)",
				"location": {
					"file": "",
					"class": "java.lang.Character",
					"method": "<java.lang.Character: boolean isWhitespace(char)>",
					"line": 6757
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,151,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>,charPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,345,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, endPos = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>(), 316)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack9,117,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack9, 117)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>,charPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,345,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, endPos = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>(), 316))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack9",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
					"line": 117
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
	"line": 117
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>",
	"line": 345
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 151
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 151
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>",
	"line": 345
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "charPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: int getExpressionEnd()>",
					"line": 345
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>,$stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key),29,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack65 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>("CannotFindSchema"),44,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack65 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotFindSchema'), 44)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>,$stack1 = <cz.startnet.utils.pgdiff.Resources: java.util.ResourceBundle RESOURCE_BUNDLE>,29,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87) => (<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>, $stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key), 29)) => Node(<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>,$stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key),29,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack65 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>("CannotFindSchema"),44,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack65 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotFindSchema'), 44))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = <cz.startnet.utils.pgdiff.Resources: java.util.ResourceBundle RESOURCE_BUNDLE>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.Resources",
					"method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
					"line": 29
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.Resources",
	"method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
	"line": 29
},{
	"class": "cz.startnet.utils.pgdiff.Resources",
	"method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
	"line": 29
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 44
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.Resources",
					"method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
					"line": 29
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.Resources",
	"method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
	"line": 29
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 44
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack65 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotFindSchema')",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 44
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,endPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,160,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, endPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 160)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,135,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,247,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 247)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack8 = virtualinvoke $stack7.<java.lang.String: char charAt(int)>($stack6),247,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack8 = virtualinvoke $stack7.<java.lang.String: char charAt(int)>($stack6), 247)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>,$stack1 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,117,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack1 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 117)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,72,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 72)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,320,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 320)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,247,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 247))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
					"line": 117
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
	"line": 117
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 72
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 320
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 247
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "endPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 160
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 160
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 135
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 247
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 247
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack8 = virtualinvoke $stack7.<java.lang.String: char charAt(int)>($stack6)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
					"line": 247
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,88,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 88)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack20 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,397,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack20 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 397)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack17 = $stack20 + 20,400,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack17 = $stack20 + 20, 400)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack18 = virtualinvoke $stack11.<java.lang.String: java.lang.String substring(int,int)>($stack12, $stack17),400,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack18 = virtualinvoke $stack11.<java.lang.String: java.lang.String substring(int,int)>($stack12, $stack17), 400)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,71,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 71)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,72,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 72)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,296,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 296)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,400,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 400))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 71
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 71
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 72
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 296
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 400
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 88
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 88
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 397
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 400
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 400
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack18 = virtualinvoke $stack11.<java.lang.String: java.lang.String substring(int,int)>($stack12, $stack17)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
					"line": 400
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,l2 = words,46,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,word = l2[l4],49,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,135,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,322,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 322)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),133,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.schema.PgConstraint: void setDefinition(java.lang.String)>,definition := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke constraint.<cz.startnet.utils.pgdiff.schema.PgConstraint: void setDefinition(java.lang.String)>($stack6), 133)) => Node(<cz.startnet.utils.pgdiff.schema.PgConstraint: void setDefinition(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgConstraint: java.lang.String definition> = definition,101,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke constraint.<cz.startnet.utils.pgdiff.schema.PgConstraint: void setDefinition(java.lang.String)>($stack6), 133) => (<cz.startnet.utils.pgdiff.schema.PgConstraint: void setDefinition(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgConstraint: java.lang.String definition> = definition, 101)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack47 = newarray (java.lang.String)[1],60,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String trim()>,$stack5 = l0,2878,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),133,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.schema.PgConstraint: void setDefinition(java.lang.String)>,definition := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke constraint.<cz.startnet.utils.pgdiff.schema.PgConstraint: void setDefinition(java.lang.String)>($stack6), 133)) => Node(<cz.startnet.utils.pgdiff.schema.PgConstraint: void setDefinition(java.lang.String)>,this.<cz.startnet.utils.pgdiff.schema.PgConstraint: java.lang.String definition> = definition,101,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke constraint.<cz.startnet.utils.pgdiff.schema.PgConstraint: void setDefinition(java.lang.String)>($stack6), 133) => (<cz.startnet.utils.pgdiff.schema.PgConstraint: void setDefinition(java.lang.String)>, this.<cz.startnet.utils.pgdiff.schema.PgConstraint: java.lang.String definition> = definition, 101))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack47 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 60
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 60
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2878
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 133
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgConstraint",
	"method": "<cz.startnet.utils.pgdiff.schema.PgConstraint: void setDefinition(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgConstraint",
	"method": "<cz.startnet.utils.pgdiff.schema.PgConstraint: void setDefinition(java.lang.String)>",
	"line": 101
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l2 = words",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
					"line": 46
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 46
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 49
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 135
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 322
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 133
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgConstraint",
	"method": "<cz.startnet.utils.pgdiff.schema.PgConstraint: void setDefinition(java.lang.String)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.schema.PgConstraint",
	"method": "<cz.startnet.utils.pgdiff.schema.PgConstraint: void setDefinition(java.lang.String)>",
	"line": 101
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "this.<cz.startnet.utils.pgdiff.schema.PgConstraint: java.lang.String definition> = definition",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.schema.PgConstraint",
					"method": "<cz.startnet.utils.pgdiff.schema.PgConstraint: void setDefinition(java.lang.String)>",
					"line": 101
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack33,156,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack33, 156)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>,$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,135,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,322,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 322)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),147,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 147)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6),147,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String trim()>,$stack5 = l0,2878,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,$stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),147,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 147)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>,virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6),147,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 64) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6), 147))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 76
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2878
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 147
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 147
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack33",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 156
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 156
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
	"line": 135
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 322
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 147
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
	"line": 147
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke column.<cz.startnet.utils.pgdiff.schema.PgColumn: void parseDefinition(java.lang.String)>($stack6)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseColumn(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
					"line": 147
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = endPos,175,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = endPos, 175)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack20 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,397,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack20 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 397)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack17 = $stack20 + 20,400,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack17 = $stack20 + 20, 400)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack6 = l2 + l3,207,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack6 = l2 + l3, 207)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack47 = newarray (java.lang.String)[1],60,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,words := @parameter0: java.lang.String[],-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack6 = l2 + l3,207,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack6 = l2 + l3, 207))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack47 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 60
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 60
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1965
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 207
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = endPos",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
					"line": 175
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 175
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 397
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 400
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1965
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 207
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack6 = l2 + l3",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: void <init>(char[],int,int)>",
					"line": 207
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 67)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack35 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,300,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 300)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack20 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,397,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack20 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 397)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack17 = $stack20 + 20,400,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack17 = $stack20 + 20, 400)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: java.lang.String substring(int,int)>,specialinvoke $stack14.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2),1963,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack14.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2), 1963)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>,$stack4 = words[0],99,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: java.lang.String substring(int,int)>,specialinvoke $stack14.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2),1963,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack14.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2), 1963))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack4 = words[0]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
					"line": 99
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1963
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 300
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 397
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 400
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1963
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack14.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l2)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String substring(int,int)>",
					"line": 1963
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack24 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,67,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack24 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 67)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,151,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 151)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>,$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,163,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack32 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,253,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack32 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 253)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,259,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 259)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack36 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,271,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack36 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 271)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack60 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack60 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 273)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>,$stack1 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,117,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31) => (<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36) => (<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack1 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 117)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,72,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 72)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,320,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 320)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack32 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,253,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack32 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 253)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,259,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 259)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack51 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,260,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack51 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 260)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack60 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack60 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 273)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack59 = virtualinvoke $stack58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to get substring: "),273,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack59 = virtualinvoke $stack58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Failed to get substring: '), 273))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
					"line": 117
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
	"line": 117
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 72
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 320
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 253
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 259
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 260
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack24 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 67
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 67
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 151
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
	"line": 163
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 253
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 259
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 271
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 273
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack60 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
					"line": 273
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,table = $stack14,48,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = $stack14, 48)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void setWith(java.lang.String)>($stack40),86,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void setWith(java.lang.String)>($stack40), 86)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>,word = l2[l4],49,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,word := @parameter0: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack5 = virtualinvoke word.<java.lang.String: int length()>(),64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,wordEnd = $stack4 + $stack5,64,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd,76,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,318,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 318)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>,325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,$stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, $stack7 = virtualinvoke $stack6.<java.lang.String: java.lang.String substring(int,int)>($stack5, endPos), 325)) => Node(<java.lang.String: java.lang.String trim()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<java.lang.String: java.lang.String trim()>,$stack5 = l0,2878,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>, result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(), 325)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>,result = virtualinvoke $stack7.<java.lang.String: java.lang.String trim()>(),325,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(parser, table), 56) => (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseConstraint(cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack6 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 133)) => Node(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>,$stack40 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(),86,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack40 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>(), 86))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "word = l2[l4]",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
					"line": 49
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
	"line": 49
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": -1
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 64
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 318
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String trim()>",
	"line": 2878
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String getExpression()>",
	"line": 325
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 86
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "table = $stack14",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 48
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 48
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
	"line": 86
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke table.<cz.startnet.utils.pgdiff.schema.PgTable: void setWith(java.lang.String)>($stack40)",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
					"method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
					"line": 86
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>,startPos = 0,136,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70) => (<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>, $stack6 = virtualinvoke string.<java.lang.String: char charAt(int)>(startPos), 139)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack9 = l2 + l3,205,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack9 = l2 + l3, 205)) => Node(<java.lang.String: void <init>(char[],int,int)>,specialinvoke $stack8.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>($stack9),205,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, specialinvoke $stack8.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>($stack9), 205)) SINK=>BASE: Node(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>,$stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,73,SourceNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 73)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>,$stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,296,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack33 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>(), 89) => (<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>, $stack18 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 296)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>,401,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 401)) => Node(<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>,$stack17 = virtualinvoke $stack16.<java.lang.String: int length()>(),401,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>(), 91) => (<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>, $stack17 = virtualinvoke $stack16.<java.lang.String: int length()>(), 401)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l3 = l2 - l1,1965,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, l3 = l2 - l1, 1965)) => Node(<java.lang.String: void <init>(char[],int,int)>,l3 := @parameter2: int,-1,SimpleNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack9 = l2 + l3,205,SinkNode, path: (<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32) => (<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47) => (<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67) => (<java.lang.String: java.lang.String substring(int,int)>, specialinvoke $stack6.<java.lang.String: void <init>(char[],int,int)>($stack7, l1, l3), 1969) => (<java.lang.String: void <init>(char[],int,int)>, $stack9 = l2 + l3, 205))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.Parser",
					"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
					"line": 73
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
	"line": 73
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseString()>",
	"line": 296
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 401
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "<cz.startnet.utils.pgdiff.parsers.Parser: void throwUnsupportedCommand()>",
	"line": 401
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1965
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 205
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "startPos = 0",
				"location": {
					"file": "",
					"class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
					"method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>",
					"line": 136
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
	"method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>",
	"line": 136
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int,int)>",
	"line": 1965
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 205
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 205
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack8.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>($stack9)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: void <init>(char[],int,int)>",
					"line": 205
				}
			}
		]
	}
}

,

{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "<java.lang.Character: java.lang.Class TYPE> - <java.lang.Character: java.lang.Class TYPE>",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "<java.lang.Character: java.lang.Class TYPE> = $stack2",
				"location": {
					"file": "",
					"class": "java.lang.Character",
					"method": "<clinit>",
					"line": 175
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "parse",
	"line": 57
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "expectOptional",
	"line": 99
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "expect",
	"line": 69
},{
	"class": "java.lang.Character",
	"method": "<clinit>",
	"line": 175
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "<java.lang.Character: java.lang.Class TYPE> = $stack2",
				"location": {
					"file": "",
					"class": "java.lang.Character",
					"method": "<clinit>",
					"line": 175
				},
				"stackTrace": [{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "parse",
	"line": 76
},{
	"class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
	"method": "parseInherits",
	"line": 105
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "expect",
	"line": 47
},{
	"class": "cz.startnet.utils.pgdiff.parsers.Parser",
	"method": "expect",
	"line": 69
},{
	"class": "java.lang.Character",
	"method": "<clinit>",
	"line": 175
}]
			}
		]
	}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.schema.PgDatabase",
  "method": "<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>",
  "line": "109"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 40)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "40"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "50"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table), 50)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "117"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack16), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = lengthof l2",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l3 = lengthof l2, 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if l4 >= l3 goto return",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31), 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack32 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "114"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack15 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack14), 114)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack52 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack52 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word), 79)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack50 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "118"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 != 0 goto $stack8 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "118"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack9, $stack10)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "86"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack22 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack9, $stack10), 86)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "msg := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserException",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(msg)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserException",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>",
  "line": "33"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)","(<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(msg), 33)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack52 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "114"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack15 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack14), 114)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack44 == 91 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "105"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack6), 105)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack44 == 91 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack1.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "117"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 >= $stack3 goto return",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "117"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd), 69)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: char",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "6757"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31), 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack32 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "117"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack16), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd), 69)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: char",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "6757"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31), 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack32 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.Resources",
  "method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
  "line": "29"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack59 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CreateTablePrimaryKeyNotSupported')",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "58"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack59 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CreateTablePrimaryKeyNotSupported'), 58)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "msg := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserException",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(msg)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserException",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>",
  "line": "33"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)","(<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(msg), 33)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "117"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack16), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "47"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "105"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack6), 105)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd), 69)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: char",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "6757"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31), 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack32 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "105"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack6), 105)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = lengthof l2",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l3 = lengthof l2, 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if l4 >= l3 goto return",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.Resources",
  "method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
  "line": "29"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.Resources",
  "method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
  "line": "29"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7[0] = $stack8",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "117"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack16), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word), 79)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack50 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack44 == 91 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "114"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack15 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack14), 114)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "found = virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>($stack4, 1)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, found = virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>($stack4, 1), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if found != 0 goto i = 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "101"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "105"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack6), 105)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack42 == 44 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "105"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack6), 105)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack26 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "114"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack15 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack14), 114)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack46 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "114"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack15 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack14), 114)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd), 69)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: char",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "6757"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31), 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack32 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "47"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "105"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack6), 105)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word), 79)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack50 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack38 == 59 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = virtualinvoke string.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\.')",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>",
  "line": "133"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack5 = names[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>",
  "line": "75"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "39"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "40"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 40)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.startnet.utils.pgdiff.schema.PgSchema",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.schema.PgSchema",
  "method": "<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table), 50)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List rels>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.schema.PgSchema",
  "method": "<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>",
  "line": "399"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table), 50)","(<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List rels>, 399)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack8 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack38 == 59 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "47"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack46 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack26 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack8 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack52 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack45 = '('",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack46 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack8 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack42 == 44 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack8 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd), 69)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: char",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "6757"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31), 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack32 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke $stack6.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "66"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack7 = virtualinvoke $stack6.<java.lang.String: int length()>(), 66)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wordEnd > $stack7 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "66"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "found = virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>($stack4, 1)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, found = virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>($stack4, 1), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if found != 0 goto i = 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "101"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "105"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack6), 105)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "47"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "117"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack16), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack52 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack8 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = lengthof words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "105"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack6 = lengthof words, 105)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if i >= $stack6 goto return 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "105"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack38 == 59 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "117"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack16), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack26 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = lengthof l2",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l3 = lengthof l2, 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if l4 >= l3 goto return",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack8 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack44 == 91 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.Resources",
  "method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
  "line": "29"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord')",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack9, $stack10)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "86"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack22 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack9, $stack10), 86)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "86"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.schema.PgDatabase",
  "method": "<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>",
  "line": "109"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 40)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "40"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 40)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.startnet.utils.pgdiff.schema.PgSchema",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.schema.PgSchema",
  "method": "<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table), 50)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List rels>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.schema.PgSchema",
  "method": "<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>",
  "line": "399"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table), 50)","(<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List rels>, 399)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd), 69)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: char",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "6757"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31), 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack32 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack17 = interfaceinvoke strings.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack16)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>, $stack17 = interfaceinvoke strings.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack16), 163)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = (java.lang.String[]) $stack17",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack5 = names[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>",
  "line": "75"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "39"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "40"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "50"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table), 50)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack26 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack51 = ']'",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word), 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack52 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack9, $stack10)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "86"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack22 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack9, $stack10), 86)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "86"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema defaultSchema>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.schema.PgDatabase",
  "method": "<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>",
  "line": "78"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack6 = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>(), 73)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke this.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getDefaultSchema()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.schema.PgDatabase",
  "method": "<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>",
  "line": "109"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 40)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "40"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "50"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table), 50)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack44 == 91 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "105"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack6), 105)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack38 == 59 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "114"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack15 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack14), 114)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word), 79)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack50 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack8 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack26 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "47"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word), 79)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack50 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack38 == 59 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.Resources",
  "method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
  "line": "29"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack57 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CreateTableUniqueNotSupported')",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "62"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack57 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CreateTableUniqueNotSupported'), 62)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack56.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack57)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "62"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack56.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack57), 62)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack38 == 59 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wordEnd == $stack29 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "68"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack38 == 59 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack42 == 44 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.schema.PgSchema",
  "method": "<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>",
  "line": "186"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 73)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "39"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "40"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 40)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.startnet.utils.pgdiff.schema.PgSchema",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.schema.PgSchema",
  "method": "<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table), 50)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List rels>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.schema.PgSchema",
  "method": "<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>",
  "line": "399"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table), 50)","(<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List rels>, 399)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "strings = $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>",
  "line": "135"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>, strings = $stack5, 135)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = interfaceinvoke strings.<java.util.List: int size()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>, $stack15 = interfaceinvoke strings.<java.util.List: int size()>(), 163)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = newarray (java.lang.String)[$stack15]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>, $stack16 = newarray (java.lang.String)[$stack15], 163)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = interfaceinvoke strings.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack16)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>, $stack17 = interfaceinvoke strings.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack16), 163)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = (java.lang.String[]) $stack17",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack5 = names[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>",
  "line": "75"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "39"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "40"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 40)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.startnet.utils.pgdiff.schema.PgSchema",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.schema.PgSchema",
  "method": "<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table), 50)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List rels>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.schema.PgSchema",
  "method": "<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>",
  "line": "399"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table), 50)","(<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List rels>, 399)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "114"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack15 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack14), 114)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = lengthof words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "105"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack6 = lengthof words, 105)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if i >= $stack6 goto return 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "105"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "114"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack15 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack14), 114)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack26 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord')",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack9, $stack10)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "86"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack22 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack9, $stack10), 86)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "msg := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserException",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(msg)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserException",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>",
  "line": "33"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)","(<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(msg), 33)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "105"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack6), 105)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack46 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack8 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack46 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack42 == 44 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack44 == 91 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack8 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word), 79)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack50 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "i = 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "105"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, i = i + 1, 105)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "i = i + 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "105"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, i = i + 1, 105)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if i >= $stack6 goto return 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "105"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack42 == 44 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l3 = lengthof l2",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l3 = lengthof l2, 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if l4 >= l3 goto return",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "strings = $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>",
  "line": "135"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>, strings = $stack5, 135)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = interfaceinvoke strings.<java.util.List: int size()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>, $stack15 = interfaceinvoke strings.<java.util.List: int size()>(), 163)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = newarray (java.lang.String)[$stack15]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>, $stack16 = newarray (java.lang.String)[$stack15], 163)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = interfaceinvoke strings.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack16)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>, $stack17 = interfaceinvoke strings.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack16), 163)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = (java.lang.String[]) $stack17",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack5 = names[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>",
  "line": "75"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "39"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "40"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "50"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table), 50)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack26 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack44 == 91 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "117"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack16), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack42 == 44 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "table = $stack14",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "48"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = $stack14, 48)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "50"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table), 50)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "105"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack6), 105)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack52 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack29 = virtualinvoke $stack28.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "68"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack29 = virtualinvoke $stack28.<java.lang.String: int length()>(), 68)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wordEnd == $stack29 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "68"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack46 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "117"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack16), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack46 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "table = $stack14",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "48"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, table = $stack14, 48)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "rel := @parameter0: cz.startnet.utils.pgdiff.schema.PgRelation",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.schema.PgSchema",
  "method": "<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table), 50)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(rel)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.schema.PgSchema",
  "method": "<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>",
  "line": "399"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table), 50)","(<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>, interfaceinvoke $stack2.<java.util.List: boolean add(java.lang.Object)>(rel), 399)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.Resources",
  "method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
  "line": "29"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack59 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CreateTablePrimaryKeyNotSupported')",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "58"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack59 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CreateTablePrimaryKeyNotSupported'), 58)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd), 69)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: char",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "6757"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31), 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack32 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack52 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "117"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack16), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack44 == 91 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack42 == 44 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd), 69)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: char",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "6757"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31), 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack32 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wordEnd > $stack7 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "66"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "114"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack15 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack14), 114)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack42 == 44 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String name>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.schema.PgSchema",
  "method": "<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>",
  "line": "186"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, $stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>(), 73)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack7 = virtualinvoke $stack6.<cz.startnet.utils.pgdiff.schema.PgSchema: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "39"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "40"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "50"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table), 50)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord')",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack9, $stack10)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "86"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack22 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack9, $stack10), 86)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "86"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack26 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack8 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "found = virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>($stack4, 1)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, found = virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>($stack4, 1), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if found != 0 goto i = 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "101"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word), 79)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack50 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word), 79)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack50 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack44 == 91 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack40 = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(wordEnd), 71)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack40 == 41 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "117"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack16), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack38 == 59 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack17 = interfaceinvoke strings.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack16)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>, $stack17 = interfaceinvoke strings.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($stack16), 163)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = (java.lang.String[]) $stack17",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack5 = names[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>",
  "line": "75"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "39"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "40"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 40)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.startnet.utils.pgdiff.schema.PgSchema",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.schema.PgSchema",
  "method": "<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table), 50)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List rels>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.schema.PgSchema",
  "method": "<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>",
  "line": "399"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table), 50)","(<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>, $stack2 = this.<cz.startnet.utils.pgdiff.schema.PgSchema: java.util.List rels>, 399)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = virtualinvoke string.<java.lang.String: java.lang.String[] split(java.lang.String)>('\\.')",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>",
  "line": "133"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)","(<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>, names = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String[] splitNames(java.lang.String)>(name), 70)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack5 = names[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserUtils",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>",
  "line": "75"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "39"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schemaName = staticinvoke <cz.startnet.utils.pgdiff.parsers.ParserUtils: java.lang.String getSchemaName(java.lang.String,cz.startnet.utils.pgdiff.schema.PgDatabase)>(tableName, database), 39)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "40"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, schema = virtualinvoke database.<cz.startnet.utils.pgdiff.schema.PgDatabase: cz.startnet.utils.pgdiff.schema.PgSchema getSchema(java.lang.String)>(schemaName), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "50"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke schema.<cz.startnet.utils.pgdiff.schema.PgSchema: void addRelation(cz.startnet.utils.pgdiff.schema.PgRelation)>(table), 50)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack42 == 44 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack46 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack14 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>",
  "line": "114"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, staticinvoke <cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>(database, parser, table), 76)","(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parseInherits(cz.startnet.utils.pgdiff.schema.PgDatabase,cz.startnet.utils.pgdiff.parsers.Parser,cz.startnet.utils.pgdiff.schema.PgTable)>, $stack15 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack14), 114)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = l0.<java.lang.String: char[] value>",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)","(<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = lengthof $stack1",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: int length()>",
  "line": "623"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack38 == 59 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": [""]
}]
}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd), 69)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: char",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "6789"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)","(<java.lang.Character: boolean isWhitespace(int)>, $stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0), 6789)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "6789"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "6757"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31), 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack32 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "68"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 68)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack52 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack26 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack38 == 59 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack40 = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(wordEnd), 71)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack40 == 41 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "88"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word), 79)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack50 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 71)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack37 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack37 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "155"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack26 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "118"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 118)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
  "line": "135"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 135)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack52 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd), 69)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: char",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "6789"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)","(<java.lang.Character: boolean isWhitespace(int)>, $stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0), 6789)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "6789"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "6757"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31), 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack32 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack44 == 91 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 71)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
  "line": "135"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 135)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "155"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
  "line": "136"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 136)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack45 = newarray (java.lang.String)[2]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "57"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = $stack25 + 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack26 = $stack25 + 1, 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "68"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 68)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack10 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "172"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack10 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack58 = new cz.startnet.utils.pgdiff.parsers.ParserException",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "58"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack58.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack59), 58)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.startnet.utils.pgdiff.parsers.ParserException",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserException",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(msg)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserException",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>",
  "line": "33"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)","(<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(msg), 33)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "66"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 66)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke $stack1.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "117"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack3 = virtualinvoke $stack1.<java.lang.String: int length()>(), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 >= $stack3 goto return",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "117"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wordEnd == $stack29 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "68"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "118"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 118)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack47 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "60"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack38 == 59 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack47 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "60"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack52 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 69)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "88"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 151)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = lengthof words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "105"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack6 = lengthof words, 105)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if i >= $stack6 goto return 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "105"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack26 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "172"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "66"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 66)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "155"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack45 = newarray (java.lang.String)[2]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "57"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack26 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "66"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 66)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
  "line": "135"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 135)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "172"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "118"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 118)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 64)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
  "line": "135"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = new cz.startnet.utils.pgdiff.parsers.ParserException",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "86"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "86"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.String: char charAt(int)>($stack4)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "118"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack6 = virtualinvoke $stack5.<java.lang.String: char charAt(int)>($stack4), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: char",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "6789"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)","(<java.lang.Character: boolean isWhitespace(int)>, $stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0), 6789)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "6789"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "6757"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "118"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 != 0 goto $stack8 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "118"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack47 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "60"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack40 = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(wordEnd), 71)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack40 == 41 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wordEnd > $stack7 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "66"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "88"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "172"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack37 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack37 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = $stack25 + 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack26 = $stack25 + 1, 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 87)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "155"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "118"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 118)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack10 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "172"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack10 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack37 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack37 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
  "line": "135"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 135)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 71)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
  "line": "135"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 135)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.Resources",
  "method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
  "line": "29"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.Resources",
  "method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
  "line": "29"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "88"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "172"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = $stack25 + 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack26 = $stack25 + 1, 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "endPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "160"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, endPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 160)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "155"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack44 == 91 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "47"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "117"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack1 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack10 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "172"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack10 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack56 = new cz.startnet.utils.pgdiff.parsers.ParserException",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "61"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack56.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack57), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.startnet.utils.pgdiff.parsers.ParserException",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserException",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(msg)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserException",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>",
  "line": "33"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)","(<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(msg), 33)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "155"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 71)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "172"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack42 == 44 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack52 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 72)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "88"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 151)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 71)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack10 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "172"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack10 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "47"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 73)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "88"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 151)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack46 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack10 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "172"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack10 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack44 == 91 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 87)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack47 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "60"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "172"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack45 = '('",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack46 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "66"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 66)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "88"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 151)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "88"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
  "line": "136"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 136)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack37 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack37 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "88"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 151)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = $stack25 + 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack26 = $stack25 + 1, 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack38 == 59 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke $stack6.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "66"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack7 = virtualinvoke $stack6.<java.lang.String: int length()>(), 66)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wordEnd > $stack7 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "66"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd), 69)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: char",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "6789"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)","(<java.lang.Character: boolean isWhitespace(int)>, $stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0), 6789)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "6789"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "6757"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31), 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack32 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 87)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack49 = '['",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word), 79)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word), 79)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack50 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "68"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 68)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
  "line": "135"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 135)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "found = virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>($stack4, 1)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, found = virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>($stack4, 1), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if found != 0 goto i = 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "101"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack45 = newarray (java.lang.String)[2]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "57"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack44 == 91 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = $stack8 + 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "117"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack9 = $stack8 + 1, 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack9",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "117"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack9, 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "endPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "160"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, endPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 160)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wordEnd == $stack29 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "68"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack24 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack24 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "88"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "155"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "117"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack1 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack40 = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(wordEnd), 71)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack40 == 41 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 64)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "endPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "160"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, endPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 160)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack45 = newarray (java.lang.String)[2]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "57"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack40 = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(wordEnd), 71)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack40 == 41 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "68"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 68)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "88"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 151)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack47 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "60"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "155"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack47 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "60"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word), 79)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack50 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "88"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
  "line": "135"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "88"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "155"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack47 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "60"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack44 == 91 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "117"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack1 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "155"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack45 = newarray (java.lang.String)[2]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "57"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack46 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = lengthof l2",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l3 = lengthof l2, 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if l4 >= l3 goto return",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "117"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack1 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
  "line": "135"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 135)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 87)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack47 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "60"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = lengthof words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "105"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack6 = lengthof words, 105)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if i >= $stack6 goto return 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "105"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "68"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 68)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.Resources",
  "method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
  "line": "29"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord')",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack9, $stack10)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "86"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack22 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack9, $stack10), 86)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "86"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wordEnd == $stack29 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "68"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wordEnd > $stack7 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "66"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "118"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 118)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "88"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 151)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "117"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack1 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "88"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 151)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "88"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "endPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "160"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, endPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 160)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack57 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CreateTableUniqueNotSupported')",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "62"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack57 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CreateTableUniqueNotSupported'), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "msg := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserException",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(msg)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserException",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>",
  "line": "33"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)","(<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(msg), 33)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word), 79)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack50 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "155"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "66"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 66)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "118"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 118)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "155"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = $stack8 + 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "117"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack9 = $stack8 + 1, 117)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack9",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "117"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = $stack9, 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
  "line": "136"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 136)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "155"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack45 = newarray (java.lang.String)[2]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "57"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = lengthof words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "105"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack6 = lengthof words, 105)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if i >= $stack6 goto return 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "105"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd), 69)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: char",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "6789"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)","(<java.lang.Character: boolean isWhitespace(int)>, $stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0), 6789)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "6789"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "6757"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31), 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack32 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack45 = newarray (java.lang.String)[2]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "57"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack52 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack47 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "60"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack26 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack45 = newarray (java.lang.String)[2]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "57"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "155"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack37 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack37 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 64)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
  "line": "136"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 136)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack40 = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(wordEnd), 71)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack40 == 41 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "88"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack16 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack52 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "172"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack44 == 91 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 87)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
  "line": "136"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 136)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack45 = newarray (java.lang.String)[2]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "57"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "found = virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>($stack4, 1)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, found = virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>($stack4, 1), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if found != 0 goto i = 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "101"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "155"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
  "line": "135"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 135)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "47"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack26 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word), 79)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack50 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 87)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack24 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack24 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = $stack25 + 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack26 = $stack25 + 1, 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack38 == 59 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack47 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "60"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wordEnd == $stack29 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "68"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "155"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd), 69)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: char",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "6789"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)","(<java.lang.Character: boolean isWhitespace(int)>, $stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0), 6789)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "6789"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "6757"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31), 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack32 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack45 = newarray (java.lang.String)[2]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "57"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack42 == 44 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack37 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack37 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack10 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "172"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack10 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "117"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack1 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wordEnd == $stack29 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "68"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack38 == 59 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack10 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "172"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack10 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack46 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "68"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 68)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 71)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "155"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack47 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "60"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack42 == 44 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 87)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "endPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "160"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, endPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 160)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd), 69)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: char",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "6789"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)","(<java.lang.Character: boolean isWhitespace(int)>, $stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0), 6789)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "6789"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "6757"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31), 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack32 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "155"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack45 = newarray (java.lang.String)[2]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "57"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord')",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack9, $stack10)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "86"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack22 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack9, $stack10), 86)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "msg := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserException",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(msg)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserException",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>",
  "line": "33"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)","(<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(msg), 33)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "155"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack45 = newarray (java.lang.String)[2]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "57"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd), 69)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: char",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "6789"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)","(<java.lang.Character: boolean isWhitespace(int)>, $stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0), 6789)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "6789"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "6757"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31), 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack32 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "172"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = $stack25 + 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack26 = $stack25 + 1, 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack45 = newarray (java.lang.String)[2]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "57"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack38 == 59 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack47 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "60"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "found = virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>($stack4, 1)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, found = virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>($stack4, 1), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if found != 0 goto i = 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "101"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack30 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wordEnd == $stack29 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "68"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = new cz.startnet.utils.pgdiff.parsers.ParserException",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "86"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.startnet.utils.pgdiff.parsers.ParserException",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserException",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(msg)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserException",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>",
  "line": "33"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)","(<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(msg), 33)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack42 == 44 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack47 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "60"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack46 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l3 = lengthof l2",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l3 = lengthof l2, 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if l4 >= l3 goto return",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "117"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack1 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
  "line": "135"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 135)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack47 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "60"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack26 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack44 == 91 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
  "line": "136"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 136)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack44 = virtualinvoke $stack43.<java.lang.String: char charAt(int)>(wordEnd), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack44 == 91 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack45 = newarray (java.lang.String)[2]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "57"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word), 79)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack50 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
  "line": "135"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack38 == 59 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "66"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 66)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack29 = virtualinvoke $stack28.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "68"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack29 = virtualinvoke $stack28.<java.lang.String: int length()>(), 68)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wordEnd == $stack29 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "68"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack46 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack37 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack37 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack47 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "60"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = $stack25 + 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack26 = $stack25 + 1, 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "endPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "160"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, endPos = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 160)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack40 = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(wordEnd), 71)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack40 == 41 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wordEnd > $stack7 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "66"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack40 = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(wordEnd), 71)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack40 == 41 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wordEnd > $stack7 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "66"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "68"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack28 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 68)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "155"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack31 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "73"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack43 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack52 = virtualinvoke $stack51.<java.lang.String: boolean equals(java.lang.Object)>(word), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack52 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "75"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack42 == 44 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 87)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
  "line": "135"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wordEnd > $stack7 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "66"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack41 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack45 = newarray (java.lang.String)[2]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "57"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wordEnd > $stack7 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "66"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack45 = newarray (java.lang.String)[2]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "57"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wordEnd == $stack29 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "68"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord')",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack9, $stack10)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "86"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack22 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($stack9, $stack10), 86)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "86"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack23 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>",
  "line": "135"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, $stack3 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 135)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "107"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack7), 107)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack42 == 44 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack25 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = $stack25 + 1",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack26 = $stack25 + 1, 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack50 = virtualinvoke $stack49.<java.lang.String: boolean equals(java.lang.Object)>(word), 79)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack50 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "79"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack45 = newarray (java.lang.String)[2]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "57"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack46 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack45), 57)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "172"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack47 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "60"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wordEnd > $stack7 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "66"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack39 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 71)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack11 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "88"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack19 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 151)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "172"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "87"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack12 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 87)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "172"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack9 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack25 = virtualinvoke $stack24.<java.lang.String: java.lang.String substring(int,int)>($stack23, wordEnd), 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack26 = virtualinvoke $stack25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(word), 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack26 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "67"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "66"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack6 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 66)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack10 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "172"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack10 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "76"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd, 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "151"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack4 = this.<cz.startnet.utils.pgdiff.parsers.Parser: int position>, 151)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack40 = virtualinvoke $stack39.<java.lang.String: char charAt(int)>(wordEnd), 71)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack40 == 41 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "71"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack38 = virtualinvoke $stack37.<java.lang.String: char charAt(int)>(wordEnd), 70)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack38 == 59 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "70"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack42 == 44 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack47 = newarray (java.lang.String)[1]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "60"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack48 = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack47), 60)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "words := @parameter0: java.lang.String[]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = words[0]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>",
  "line": "99"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>($stack9), 35)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expectOptional(java.lang.String[])>, $stack4 = words[0], 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack31 = virtualinvoke $stack30.<java.lang.String: char charAt(int)>(wordEnd), 69)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: char",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: int",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "6789"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)","(<java.lang.Character: boolean isWhitespace(int)>, $stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0), 6789)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(int)>",
  "line": "6789"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)","(<java.lang.Character: boolean isWhitespace(char)>, $stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0), 6757)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0)",
"location": {
  "file": "",
  "class": "java.lang.Character",
  "method": "<java.lang.Character: boolean isWhitespace(char)>",
  "line": "6757"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack6), 118)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack32 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($stack31), 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack32 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "69"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack46 = virtualinvoke $stack45.<java.lang.String: boolean equals(java.lang.Object)>(word), 74)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack46 != 0 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "74"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = words",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "46"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, l2 = words, 46)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "word = l2[l4]",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>",
  "line": "49"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, word = l2[l4], 49)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "word := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke word.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack5 = virtualinvoke word.<java.lang.String: int length()>(), 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wordEnd = $stack4 + $stack5",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "64"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, wordEnd = $stack4 + $stack5, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack42 = virtualinvoke $stack41.<java.lang.String: char charAt(int)>(wordEnd), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack42 == 44 goto this.<cz.startnet.utils.pgdiff.parsers.Parser: int position> = wordEnd",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>",
  "line": "72"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.Resources",
  "method": "<cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>",
  "line": "29"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, $stack9 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CannotParseStringExpectedWord'), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack57 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CreateTableUniqueNotSupported')",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.CreateTableParser",
  "method": "<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>",
  "line": "62"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, $stack57 = staticinvoke <cz.startnet.utils.pgdiff.Resources: java.lang.String getString(java.lang.String)>('CreateTableUniqueNotSupported'), 62)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "msg := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserException",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(msg)",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.ParserException",
  "method": "<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>",
  "line": "33"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>($stack8), 32)","(<cz.startnet.utils.pgdiff.parsers.Parser: void expect(java.lang.String[])>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>(word, 0), 47)","(<cz.startnet.utils.pgdiff.parsers.Parser: boolean expect(java.lang.String,boolean)>, specialinvoke $stack8.<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>($stack22), 86)","(<cz.startnet.utils.pgdiff.parsers.ParserException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(msg), 33)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>",
  "line": "118"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, specialinvoke $stack7.<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>(statement), 31)","(<cz.startnet.utils.pgdiff.parsers.Parser: void <init>(java.lang.String)>, virtualinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>(), 36)","(<cz.startnet.utils.pgdiff.parsers.Parser: void skipWhitespace()>, $stack5 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 118)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "154"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack27 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "162"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack7 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 162)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "163"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack14 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 163)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack10 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>",
"location": {
  "file": "",
  "class": "cz.startnet.utils.pgdiff.parsers.Parser",
  "method": "<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>",
  "line": "172"
},
"stackTrace": ["(<cz.startnet.utils.pgdiff.parsers.CreateTableParser: void parse(cz.startnet.utils.pgdiff.schema.PgDatabase,java.lang.String)>, tableName = virtualinvoke parser.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>(), 37)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifier()>, identifier = specialinvoke this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>(), 133)","(<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String parseIdentifierInternal()>, $stack10 = this.<cz.startnet.utils.pgdiff.parsers.Parser: java.lang.String string>, 172)"]
}]
}
}

]
