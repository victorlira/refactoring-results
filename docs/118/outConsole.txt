Running soot scenario typescript-generator;cz.habarta.typescript.generator.Input;fromClassNamesAndJaxrsApplication(List<String>, List<String>, String, boolean, Predicate<String>, ClassLoader);1c03813f0d5593fbea4d3572a6ef028da3f034bd
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/typescript-generator/1c03813f0d5593fbea4d3572a6ef028da3f034bd/original-without-dependencies/typescript-generator-core-1.16-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,47400
An error occurred in getInvokeExpr with args: specialinvoke $stack7.<java.lang.StringBuffer: void <init>()>() -> java.lang.NullPointerException
Time to perform Confluence 1 Inter 0,95500
Configure Soot Confluence 2 Inter 0,21000
An error occurred in getInvokeExpr with args: specialinvoke $stack7.<java.lang.StringBuffer: void <init>()>() -> java.lang.NullPointerException
Time to perform Confluence 2 Inter 0,76300
Visited methods: 96
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2,210,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2, 210))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2,210,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2, 210)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack4 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(l1, $stack3),1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312) => (<java.lang.String: int lastIndexOf(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1807)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = $stack5,311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = $stack5, 311))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types#2 = $stack18,104,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types#2 = $stack18, 104)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,$stack5 = virtualinvoke l1.<java.lang.Throwable: java.lang.String toString()>(),311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, $stack5 = virtualinvoke l1.<java.lang.Throwable: java.lang.String toString()>(), 311)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]"),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('[]'), 1307))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack5 = new java.util.ArrayList,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types = $stack5,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(),40,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(),40,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3,784,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3, 784))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3,784,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3, 784)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack4 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(l1, $stack3),1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312) => (<java.lang.String: int lastIndexOf(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1807)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack6 = l0.<java.lang.String: char[] value>,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack6 = l0.<java.lang.String: char[] value>, 1933))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0),783,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0), 783))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0),783,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0), 783)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]"),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('[]'), 1307))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l1,312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l1, 312))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l1,312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l1, 312)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]"),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('[]'), 1307))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = $stack5,311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = $stack5, 311))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = $stack5,311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = $stack5, 311)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack6 = l0.<java.lang.String: char[] value>,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack6 = l0.<java.lang.String: char[] value>, 1933))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1),96,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types#2 = $stack18,104,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types#2 = $stack18, 104)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1),96,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]"),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('[]'), 1307))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Object: void <init>()>(),309,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Object: void <init>()>(), 309))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Object: void <init>()>(),309,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Object: void <init>()>(), 309)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]"),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('[]'), 1307))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1),102,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1),102,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack5 = new java.util.ArrayList,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types = $stack5,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(),40,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack5 = new java.util.ArrayList,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(),40,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack6 = l0.<java.lang.String: char[] value>,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack6 = l0.<java.lang.String: char[] value>, 1933))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>,781,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>, 781))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>,781,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>, 781)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1),102,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types#2 = $stack18,104,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types#2 = $stack18, 104)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1),102,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack5 = new java.util.ArrayList,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types = $stack5,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(),40,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack8 = new cz.habarta.typescript.generator.Input,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames),40,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack6 = l0.<java.lang.String: char[] value>,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack6 = l0.<java.lang.String: char[] value>, 1933))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3,227,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3, 227))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3,227,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3, 227)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack4 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(l1, $stack3),1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312) => (<java.lang.String: int lastIndexOf(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1807)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack6 = l0.<java.lang.String: char[] value>,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack6 = l0.<java.lang.String: char[] value>, 1933))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack4 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(l1, $stack3),1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312) => (<java.lang.String: int lastIndexOf(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1807)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(), 96)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,l0 := @this: java.lang.Thread,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,$stack2 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>,1439,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34) => (<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>, $stack2 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>, 1439))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(), 96)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,l0 := @this: java.lang.Thread,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,$stack2 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>,1439,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34) => (<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>, $stack2 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>, 1439)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1),96,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1),96,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack4 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(l1, $stack3),1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312) => (<java.lang.String: int lastIndexOf(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1807)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]"),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('[]'), 1307))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack6 = l0.<java.lang.String: char[] value>,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack6 = l0.<java.lang.String: char[] value>, 1933))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l0,197,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l0, 197))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l0,197,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l0, 197)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l1,312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l1, 312))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types#2 = $stack18,104,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types#2 = $stack18, 104)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l1,312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l1, 312)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(),310,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(),310,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>,786,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>, 786))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>,786,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>, 786)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack4 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(l1, $stack3),1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312) => (<java.lang.String: int lastIndexOf(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1807)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(), 96)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,l0 := @this: java.lang.Thread,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,$stack5 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>,1444,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34) => (<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>, $stack5 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>, 1444))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(), 96)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,l0 := @this: java.lang.Thread,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,$stack5 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>,1444,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34) => (<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>, $stack5 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>, 1444)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(), 96)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,l0 := @this: java.lang.Thread,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,$stack4 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>,1446,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(), 96)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,l0 := @this: java.lang.Thread,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,$stack4 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>,1446,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)), SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))]
Confluence interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Confluence flows from execution of lines 40 and 40 to line 40, defined in $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames) and $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames) and used in $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2, 210)
Confluence interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Confluence flows from execution of lines 46 and 43 to line 40, defined in $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25) and $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns) and used in $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames)
Caused by line 46 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)
Caused by line 43 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929)
Confluence interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Confluence flows from execution of lines 40 and 40 to line 54, defined in $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames) and $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames) and used in specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>("No input classes found.")
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)
Caused by line 54 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3, 784)
Confluence interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Confluence flows from execution of lines 40 and 40 to line 34, defined in $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames) and $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames) and used in originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>()
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(), 96)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(), 96)
Caused by line 34 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34) => (<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>, $stack2 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>, 1439)
 Analysis results
----------------------------
 Number of conflicts: 89
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/typescript-generator/1c03813f0d5593fbea4d3572a6ef028da3f034bd/original-without-dependencies/typescript-generator-core-1.16-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,69300
Runtime: 0.138s
OA interference in class Input, method cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader), execution of line 43 overrides 46, assigning to variable this.<cz.habarta.typescript.generator.parser.SourceType: java.lang.String usedInMember>, 
Caused by line 43 flow:
at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43)
at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:89)
at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:100)
at cz.habarta.typescript.generator.parser.SourceType.<init>(SourceType.java:20)
And line 46 flow:
at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46)
at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:100)
at cz.habarta.typescript.generator.parser.SourceType.<init>(SourceType.java:20)
 
Time to perform OA Inter 0,96600
OA Inter Visited methods: 123
 Analysis results
----------------------------
 Number of conflicts: 26
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/typescript-generator/1c03813f0d5593fbea4d3572a6ef028da3f034bd/original-without-dependencies/typescript-generator-core-1.16-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,53500
An error occurred in getInvokeExpr with args: specialinvoke $stack7.<java.lang.StringBuffer: void <init>()>() -> java.lang.NullPointerException
Time to perform DFP Inter 0,97300
Depth limit: 5
CONFLICTS: DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 46 to 40, defined in $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25) and propagated in specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)
Caused by line 46 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in $stack16 = new cz.habarta.typescript.generator.parser.SourceType and propagated in specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in $stack8 = new cz.habarta.typescript.generator.Input and propagated in $stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>() and propagated in specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in $stack16 = new cz.habarta.typescript.generator.parser.SourceType and propagated in specialinvoke this.<java.lang.Object: void <init>()>()
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100) => (<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>, specialinvoke this.<java.lang.Object: void <init>()>(), 17)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in $stack8 = new cz.habarta.typescript.generator.Input and propagated in specialinvoke this.<java.lang.Object: void <init>()>()
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types), 103) => (<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>, specialinvoke this.<java.lang.Object: void <init>()>(), 17)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 43, defined in $stack8 = new cz.habarta.typescript.generator.Input and propagated in $stack17 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)
Caused by line 43 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className) and propagated in specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in types#2 = $stack18 and propagated in specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types#2 = $stack18, 104)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in $stack5 = new java.util.ArrayList and propagated in specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types), 103)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 43, defined in $stack5 = new java.util.ArrayList and propagated in $stack33 = virtualinvoke $stack32.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>()
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)
Caused by line 43 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack33 = virtualinvoke $stack32.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 43)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in $stack5 = new java.util.ArrayList and propagated in specialinvoke $stack5.<java.util.ArrayList: void <init>()>()
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in $stack5 = new java.util.ArrayList and propagated in interfaceinvoke types.<java.util.List: boolean add(java.lang.Object)>($stack16)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, interfaceinvoke types.<java.util.List: boolean add(java.lang.Object)>($stack16), 100)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in $stack5 = new java.util.ArrayList and propagated in $stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>() and propagated in specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 43, defined in $stack8 = new cz.habarta.typescript.generator.Input and propagated in $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)
Caused by line 43 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in $stack19 = new java.lang.RuntimeException and propagated in specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
[List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack8 = new cz.habarta.typescript.generator.Input,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack17 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames),89,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns),43,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack8 = new cz.habarta.typescript.generator.Input,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types), 103)) => Node(<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>,specialinvoke this.<java.lang.Object: void <init>()>(),17,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types), 103) => (<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>, specialinvoke this.<java.lang.Object: void <init>()>(), 17))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack5 = new java.util.ArrayList,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack33 = virtualinvoke $stack32.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(),43,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack33 = virtualinvoke $stack32.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 43))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack5 = new java.util.ArrayList,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack8 = new cz.habarta.typescript.generator.Input,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames),40,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack5 = new java.util.ArrayList,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types = $stack5,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,interfaceinvoke types.<java.util.List: boolean add(java.lang.Object)>($stack16),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, interfaceinvoke types.<java.util.List: boolean add(java.lang.Object)>($stack16), 100))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack16 = new cz.habarta.typescript.generator.parser.SourceType,100,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack8 = new cz.habarta.typescript.generator.Input,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,return $stack8,103,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack5 = new java.util.ArrayList,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack5.<java.util.ArrayList: void <init>()>(),94,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types#2 = $stack18,104,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types#2 = $stack18, 104)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2),105,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack5 = new java.util.ArrayList,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types = $stack5,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types),103,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types), 103))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack7 == 0 goto $stack8 = new cz.habarta.typescript.generator.Input,95,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2),105,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack7 == 0 goto $stack8 = new cz.habarta.typescript.generator.Input,95,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack16 = new cz.habarta.typescript.generator.parser.SourceType,100,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)) => Node(<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>,this := @this: cz.habarta.typescript.generator.parser.SourceType,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)) => Node(<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>,specialinvoke this.<java.lang.Object: void <init>()>(),17,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100) => (<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>, specialinvoke this.<java.lang.Object: void <init>()>(), 17))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack8 = new cz.habarta.typescript.generator.Input,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack17 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames),89,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: ))]
Visited methods: 48
 Analysis results
----------------------------
 Number of conflicts: 30
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/typescript-generator/1c03813f0d5593fbea4d3572a6ef028da3f034bd/original-without-dependencies/typescript-generator-core-1.16-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,61800
An error occurred in getInvokeExpr with args: specialinvoke $stack7.<java.lang.StringBuffer: void <init>()>() -> java.lang.NullPointerException
Time to perform DFP Inter 0,85800
Depth limit: 5
CONFLICTS: DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className) and propagated in specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 43 to 46, defined in $stack8 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> and propagated in interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)
Caused by line 43 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)
Caused by line 46 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 43 to 46, defined in $stack17 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames) and propagated in interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)
Caused by line 43 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)
Caused by line 46 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 43 to 46, defined in $stack11 = new io.github.lukehutch.fastclasspathscanner.FastClasspathScanner and propagated in interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)
Caused by line 43 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43) => (<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>, specialinvoke $stack11.<io.github.lukehutch.fastclasspathscanner.FastClasspathScanner: void <init>(java.lang.String[])>($stack12), 70)
Caused by line 46 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 46, defined in $stack8 = new cz.habarta.typescript.generator.Input and propagated in interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)
Caused by line 46 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in $stack5 = new java.util.ArrayList and propagated in specialinvoke $stack5.<java.util.ArrayList: void <init>()>()
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>() and propagated in specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in $stack19 = new java.lang.RuntimeException and propagated in specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in types = $stack5 and propagated in specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types), 103)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 43 to 46, defined in this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> = scanner and propagated in interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)
Caused by line 43 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43) => (<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>, this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> = scanner, 75)
Caused by line 46 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 37 to 46, defined in this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> = null and propagated in interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)
Caused by line 37 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack14.<cz.habarta.typescript.generator.Input$ClasspathScanner: void <init>(cz.habarta.typescript.generator.Input$1)>(null), 37) => (<cz.habarta.typescript.generator.Input$ClasspathScanner: void <init>(cz.habarta.typescript.generator.Input$1)>, specialinvoke this.<cz.habarta.typescript.generator.Input$ClasspathScanner: void <init>()>(), 62) => (<cz.habarta.typescript.generator.Input$ClasspathScanner: void <init>()>, this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> = null, 64)
Caused by line 46 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>() and propagated in specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 43 to 46, defined in $stack7 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> and propagated in interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)
Caused by line 43 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43) => (<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>, $stack7 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner>, 67)
Caused by line 46 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 43 to 40, defined in classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns) and propagated in specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)
Caused by line 43 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 46, defined in types = $stack5 and propagated in interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)
Caused by line 46 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 43 to 46, defined in allClassNames = $stack4 and propagated in interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)
Caused by line 43 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)
Caused by line 46 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 43 to 46, defined in $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>() and propagated in interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)
Caused by line 43 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)
Caused by line 46 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 43 to 40, defined in $stack7 = new java.util.ArrayList and propagated in specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)
Caused by line 43 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87) => (<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>, specialinvoke $stack7.<java.util.ArrayList: void <init>()>(), 111)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in $stack16 = new cz.habarta.typescript.generator.parser.SourceType and propagated in specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in types = $stack5 and propagated in interfaceinvoke types.<java.util.List: boolean add(java.lang.Object)>($stack16)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, interfaceinvoke types.<java.util.List: boolean add(java.lang.Object)>($stack16), 100)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 43 to 46, defined in classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns) and propagated in interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)
Caused by line 43 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)
Caused by line 46 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 43 to 46, defined in $stack7 = new java.util.ArrayList and propagated in interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)
Caused by line 43 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87) => (<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>, specialinvoke $stack7.<java.util.ArrayList: void <init>()>(), 111)
Caused by line 46 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 43 to 40, defined in allClassNames = $stack4 and propagated in specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)
Caused by line 43 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 46, defined in $stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes> and propagated in interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)
Caused by line 46 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in $stack8 = new cz.habarta.typescript.generator.Input and propagated in specialinvoke this.<java.lang.Object: void <init>()>()
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types), 103) => (<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>, specialinvoke this.<java.lang.Object: void <init>()>(), 17)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in $stack16 = new cz.habarta.typescript.generator.parser.SourceType and propagated in specialinvoke this.<java.lang.Object: void <init>()>()
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100) => (<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>, specialinvoke this.<java.lang.Object: void <init>()>(), 17)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Data flows from execution of line 40 to 40, defined in types#2 = $stack18 and propagated in specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types#2 = $stack18, 104)
Caused by line 40 flow: path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)
DF interference in <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>
Empty list for reporting data flow! Error: head of empty list
[List(Node(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>,$stack8 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner>,77,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46))), List(Node(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>,$stack7 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner>,67,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43) => (<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>, $stack7 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner>, 67)) => Node(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>,$stack8 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner>,77,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack17 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames),89,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack8 = new cz.habarta.typescript.generator.Input,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types), 103)) => Node(<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>,specialinvoke this.<java.lang.Object: void <init>()>(),17,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types), 103) => (<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>, specialinvoke this.<java.lang.Object: void <init>()>(), 17))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,$stack7 = new java.util.ArrayList,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87) => (<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>, specialinvoke $stack7.<java.util.ArrayList: void <init>()>(), 111)) => Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack7 == 0 goto $stack8 = new cz.habarta.typescript.generator.Input,95,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,$stack7 = new java.util.ArrayList,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87) => (<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>, specialinvoke $stack7.<java.util.ArrayList: void <init>()>(), 111)) => Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input$ClasspathScanner: void <init>()>,this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> = null,64,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack14.<cz.habarta.typescript.generator.Input$ClasspathScanner: void <init>(cz.habarta.typescript.generator.Input$1)>(null), 37) => (<cz.habarta.typescript.generator.Input$ClasspathScanner: void <init>(cz.habarta.typescript.generator.Input$1)>, specialinvoke this.<cz.habarta.typescript.generator.Input$ClasspathScanner: void <init>()>(), 62) => (<cz.habarta.typescript.generator.Input$ClasspathScanner: void <init>()>, this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> = null, 64)) => Node(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>,$stack8 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner>,77,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack16 = new cz.habarta.typescript.generator.parser.SourceType,100,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack8 = new cz.habarta.typescript.generator.Input,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,return $stack8,103,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,$stack7 = new java.util.ArrayList,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87) => (<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>, specialinvoke $stack7.<java.util.ArrayList: void <init>()>(), 111)) => Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack17 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames),89,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack8 = new cz.habarta.typescript.generator.Input,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames),40,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack17 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames),89,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack5 = new java.util.ArrayList,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack5.<java.util.ArrayList: void <init>()>(),94,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94))), List(Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,$stack7 = new java.util.ArrayList,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87) => (<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>, specialinvoke $stack7.<java.util.ArrayList: void <init>()>(), 111)) => Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types#2 = $stack18,104,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types#2 = $stack18, 104)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2),105,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100))), List(Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack7 == 0 goto $stack8 = new cz.habarta.typescript.generator.Input,95,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types = $stack5,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2),105,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack7 == 0 goto $stack8 = new cz.habarta.typescript.generator.Input,95,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack7 == 0 goto $stack8 = new cz.habarta.typescript.generator.Input,95,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: )), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack16 = new cz.habarta.typescript.generator.parser.SourceType,100,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)) => Node(<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>,this := @this: cz.habarta.typescript.generator.parser.SourceType,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)) => Node(<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>,specialinvoke this.<java.lang.Object: void <init>()>(),17,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100) => (<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>, specialinvoke this.<java.lang.Object: void <init>()>(), 17))), List(Node(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>,this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> = scanner,75,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43) => (<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>, this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> = scanner, 75)) => Node(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>,$stack8 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner>,77,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46))), List(Node(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>,$stack11 = new io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,70,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43) => (<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>, specialinvoke $stack11.<io.github.lukehutch.fastclasspathscanner.FastClasspathScanner: void <init>(java.lang.String[])>($stack12), 70)) => Node(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>,scanner = virtualinvoke $stack11.<io.github.lukehutch.fastclasspathscanner.FastClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scan()>(),70,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43) => (<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>, scanner = virtualinvoke $stack11.<io.github.lukehutch.fastclasspathscanner.FastClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scan()>(), 70)) => Node(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>,this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> = scanner,75,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43) => (<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>, this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> = scanner, 75)) => Node(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>,$stack8 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner>,77,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46))), List(Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,$stack7 = new java.util.ArrayList,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87) => (<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>, specialinvoke $stack7.<java.util.ArrayList: void <init>()>(), 111)) => Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack17 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames),89,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types = $stack5,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types),103,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types), 103))), List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types = $stack5,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,interfaceinvoke types.<java.util.List: boolean add(java.lang.Object)>($stack16),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, interfaceinvoke types.<java.util.List: boolean add(java.lang.Object)>($stack16), 100)))]
Visited methods: 48
 Analysis results
----------------------------
 Number of conflicts: 46
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/typescript-generator/1c03813f0d5593fbea4d3572a6ef028da3f034bd/original-without-dependencies/typescript-generator-core-1.16-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,48800
Time to perform PDG 0,57000
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/typescript-generator/1c03813f0d5593fbea4d3572a6ef028da3f034bd/original-without-dependencies/typescript-generator-core-1.16-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,45600
Time to perform PDG 0,53300
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
