SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2,210,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2, 210))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2,210,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2, 210))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack4 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(l1, $stack3),1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312) => (<java.lang.String: int lastIndexOf(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1807))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = $stack5,311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = $stack5, 311))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types#2 = $stack18,104,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types#2 = $stack18, 104)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,$stack5 = virtualinvoke l1.<java.lang.Throwable: java.lang.String toString()>(),311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, $stack5 = virtualinvoke l1.<java.lang.Throwable: java.lang.String toString()>(), 311))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]"),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('[]'), 1307))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack5 = new java.util.ArrayList,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types = $stack5,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(),40,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(),40,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3,784,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3, 784))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3,784,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3, 784))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack4 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(l1, $stack3),1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312) => (<java.lang.String: int lastIndexOf(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1807))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack6 = l0.<java.lang.String: char[] value>,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack6 = l0.<java.lang.String: char[] value>, 1933))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0),783,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0), 783))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0),783,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0), 783))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]"),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('[]'), 1307))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l1,312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l1, 312))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l1,312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l1, 312))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]"),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('[]'), 1307))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = $stack5,311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = $stack5, 311))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = $stack5,311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = $stack5, 311))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack6 = l0.<java.lang.String: char[] value>,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack6 = l0.<java.lang.String: char[] value>, 1933))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1),96,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types#2 = $stack18,104,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types#2 = $stack18, 104)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1),96,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]"),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('[]'), 1307))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Object: void <init>()>(),309,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Object: void <init>()>(), 309))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Object: void <init>()>(),309,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Object: void <init>()>(), 309))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]"),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('[]'), 1307))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1),102,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1),102,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack5 = new java.util.ArrayList,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types = $stack5,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(),40,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack5 = new java.util.ArrayList,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(),40,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack6 = l0.<java.lang.String: char[] value>,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack6 = l0.<java.lang.String: char[] value>, 1933))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>,781,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>, 781))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>,781,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>, 781))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1),102,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types#2 = $stack18,104,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types#2 = $stack18, 104)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1),102,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack5 = new java.util.ArrayList,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types = $stack5,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(),40,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack8 = new cz.habarta.typescript.generator.Input,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames),40,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack6 = l0.<java.lang.String: char[] value>,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack6 = l0.<java.lang.String: char[] value>, 1933))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3,227,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3, 227))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3,227,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3, 227))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack4 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(l1, $stack3),1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312) => (<java.lang.String: int lastIndexOf(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1807))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack6 = l0.<java.lang.String: char[] value>,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack6 = l0.<java.lang.String: char[] value>, 1933))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack4 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(l1, $stack3),1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312) => (<java.lang.String: int lastIndexOf(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1807))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(), 96)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,l0 := @this: java.lang.Thread,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,$stack2 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>,1439,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34) => (<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>, $stack2 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>, 1439))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(), 96)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,l0 := @this: java.lang.Thread,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,$stack2 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>,1439,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34) => (<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>, $stack2 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>, 1439))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1),96,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1),96,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack4 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(l1, $stack3),1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312) => (<java.lang.String: int lastIndexOf(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1807))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]"),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('[]'), 1307))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack6 = l0.<java.lang.String: char[] value>,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack6 = l0.<java.lang.String: char[] value>, 1933))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l0,197,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l0, 197))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l0,197,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l0, 197))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l1,312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l1, 312))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types#2 = $stack18,104,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types#2 = $stack18, 104)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l1,312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l1, 312))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(),310,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(),310,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>,786,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>, 786))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>,786,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>, 786))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack4 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(l1, $stack3),1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312) => (<java.lang.String: int lastIndexOf(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1807))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(), 96)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,l0 := @this: java.lang.Thread,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,$stack5 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>,1444,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34) => (<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>, $stack5 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>, 1444))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(), 96)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,l0 := @this: java.lang.Thread,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,$stack5 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>,1444,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34) => (<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>, $stack5 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>, 1444))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(), 96)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,l0 := @this: java.lang.Thread,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,$stack4 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>,1446,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(), 96)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,l0 := @this: java.lang.Thread,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,$stack4 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>,1446,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))

SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))
SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))

source(cz.habarta.typescript.generator.parser.SourceType, <init>, 20, this.<cz.habarta.typescript.generator.parser.SourceType: java.lang.String usedInMember> = usedInMember, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:89), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:100), at cz.habarta.typescript.generator.parser.SourceType.<init>(SourceType.java:20)]) => sink(cz.habarta.typescript.generator.parser.SourceType, <init>, 20, this.<cz.habarta.typescript.generator.parser.SourceType: java.lang.String usedInMember> = usedInMember, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:100), at cz.habarta.typescript.generator.parser.SourceType.<init>(SourceType.java:20)])

source(cz.habarta.typescript.generator.Input, fromClassNames, 105, $stack19 = new java.lang.RuntimeException, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:89), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:105)]) => sink(cz.habarta.typescript.generator.Input, fromClassNames, 105, $stack19 = new java.lang.RuntimeException, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:105)])

source(cz.habarta.typescript.generator.Input, fromClassNames, 103, className = (java.lang.String) $stack9, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:89), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:103)]) => sink(cz.habarta.typescript.generator.Input, fromClassNames, 103, className = (java.lang.String) $stack9, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:103)])

source(cz.habarta.typescript.generator.Input, fromClassNames, 103, $stack8 = new cz.habarta.typescript.generator.Input, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:89), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:103)]) => sink(cz.habarta.typescript.generator.Input, fromClassNames, 103, $stack8 = new cz.habarta.typescript.generator.Input, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:103)])

source(java.util.ArrayList, <init>, -1, ArrayList.<java.util.ArrayList: java.lang.Object[] elementData> = null, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:83)]) => sink(java.util.ArrayList, <init>, -1, ArrayList.<java.util.ArrayList: java.lang.Object[] elementData> = null, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:94)])

source(java.util.ArrayList, <init>, -1, ArrayList.<java.util.ArrayList: java.lang.Object[] elementData> = null, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:87), at cz.habarta.typescript.generator.Input.filterClassNames(Input.java:110), at cz.habarta.typescript.generator.Input.globsToRegexps(Input.java:130)]) => sink(java.util.ArrayList, <init>, -1, ArrayList.<java.util.ArrayList: java.lang.Object[] elementData> = null, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:94)])

source(java.util.ArrayList, <init>, -1, ArrayList.<java.util.ArrayList: java.lang.Object[] elementData> = null, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:87), at cz.habarta.typescript.generator.Input.filterClassNames(Input.java:111)]) => sink(java.util.ArrayList, <init>, -1, ArrayList.<java.util.ArrayList: java.lang.Object[] elementData> = null, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:94)])

source(java.util.ArrayList, <init>, -1, ArrayList.<java.util.ArrayList: java.lang.Object[] elementData> = null, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:89), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:94)]) => sink(java.util.ArrayList, <init>, -1, ArrayList.<java.util.ArrayList: java.lang.Object[] elementData> = null, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:94)])

source(java.util.ArrayList, <init>, -1, ArrayList.<java.util.ArrayList: int size> = null, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:83)]) => sink(java.util.ArrayList, <init>, -1, ArrayList.<java.util.ArrayList: int size> = null, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:94)])

source(java.util.ArrayList, <init>, -1, ArrayList.<java.util.ArrayList: int size> = null, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:87), at cz.habarta.typescript.generator.Input.filterClassNames(Input.java:110), at cz.habarta.typescript.generator.Input.globsToRegexps(Input.java:130)]) => sink(java.util.ArrayList, <init>, -1, ArrayList.<java.util.ArrayList: int size> = null, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:94)])

source(java.util.ArrayList, <init>, -1, ArrayList.<java.util.ArrayList: int size> = null, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:87), at cz.habarta.typescript.generator.Input.filterClassNames(Input.java:111)]) => sink(java.util.ArrayList, <init>, -1, ArrayList.<java.util.ArrayList: int size> = null, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:94)])

source(java.util.ArrayList, <init>, -1, ArrayList.<java.util.ArrayList: int size> = null, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:89), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:94)]) => sink(java.util.ArrayList, <init>, -1, ArrayList.<java.util.ArrayList: int size> = null, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:94)])

source(java.lang.Thread, getContextClassLoader, 1439, $stack2 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:89), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:96), at java.lang.Thread.getContextClassLoader(Thread.java:1439)]) => sink(java.lang.Thread, getContextClassLoader, 1439, $stack2 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:96), at java.lang.Thread.getContextClassLoader(Thread.java:1439)])

source(cz.habarta.typescript.generator.parser.SourceType, <init>, 19, this.<cz.habarta.typescript.generator.parser.SourceType: java.lang.Class usedInClass> = usedInClass, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:89), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:100), at cz.habarta.typescript.generator.parser.SourceType.<init>(SourceType.java:19)]) => sink(cz.habarta.typescript.generator.parser.SourceType, <init>, 19, this.<cz.habarta.typescript.generator.parser.SourceType: java.lang.Class usedInClass> = usedInClass, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:100), at cz.habarta.typescript.generator.parser.SourceType.<init>(SourceType.java:19)])

source(cz.habarta.typescript.generator.Input, fromClassNames, 94, $stack5 = new java.util.ArrayList, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:89), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:94)]) => sink(cz.habarta.typescript.generator.Input, fromClassNames, 94, $stack5 = new java.util.ArrayList, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:94)])

source(cz.habarta.typescript.generator.Input, fromClassNames, 94, types = $stack5, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:89), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:94)]) => sink(cz.habarta.typescript.generator.Input, fromClassNames, 94, types = $stack5, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:94)])

source(cz.habarta.typescript.generator.Input, fromClassNames, 100, $stack16 = new cz.habarta.typescript.generator.parser.SourceType, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:89), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:100)]) => sink(cz.habarta.typescript.generator.Input, fromClassNames, 100, $stack16 = new cz.habarta.typescript.generator.parser.SourceType, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:100)])

source(cz.habarta.typescript.generator.Input, fromClassNames, 104, types#2 = $stack18, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:89), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:104)]) => sink(cz.habarta.typescript.generator.Input, fromClassNames, 104, types#2 = $stack18, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:104)])

source(java.lang.Thread, <clinit>, 1623, $stack1 = new java.lang.RuntimePermission, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:89), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:96), at java.lang.Thread.<clinit>(Thread.java:1623)]) => sink(java.lang.Thread, <clinit>, 1623, $stack1 = new java.lang.RuntimePermission, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:96), at java.lang.Thread.<clinit>(Thread.java:1623)])

source(java.lang.Thread, <clinit>, 1623, <java.lang.Thread: java.lang.RuntimePermission SUBCLASS_IMPLEMENTATION_PERMISSION> = $stack1, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:89), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:96), at java.lang.Thread.<clinit>(Thread.java:1623)]) => sink(java.lang.Thread, <clinit>, 1623, <java.lang.Thread: java.lang.RuntimePermission SUBCLASS_IMPLEMENTATION_PERMISSION> = $stack1, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:96), at java.lang.Thread.<clinit>(Thread.java:1623)])

source(cz.habarta.typescript.generator.Input, <init>, 18, this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes> = sourceTypes, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:89), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:103), at cz.habarta.typescript.generator.Input.<init>(Input.java:18)]) => sink(cz.habarta.typescript.generator.Input, <init>, 18, this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes> = sourceTypes, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:103), at cz.habarta.typescript.generator.Input.<init>(Input.java:18)])

source(java.lang.Thread, <clinit>, 1497, $stack0 = newarray (java.lang.StackTraceElement)[0], [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:89), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:96), at java.lang.Thread.<clinit>(Thread.java:1497)]) => sink(java.lang.Thread, <clinit>, 1497, $stack0 = newarray (java.lang.StackTraceElement)[0], [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:96), at java.lang.Thread.<clinit>(Thread.java:1497)])

source(java.lang.Thread, <clinit>, 1497, <java.lang.Thread: java.lang.StackTraceElement[] EMPTY_STACK_TRACE> = $stack0, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:89), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:96), at java.lang.Thread.<clinit>(Thread.java:1497)]) => sink(java.lang.Thread, <clinit>, 1497, <java.lang.Thread: java.lang.StackTraceElement[] EMPTY_STACK_TRACE> = $stack0, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:96), at java.lang.Thread.<clinit>(Thread.java:1497)])

source(java.lang.Thread, getContextClassLoader, 1444, $stack5 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:89), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:96), at java.lang.Thread.getContextClassLoader(Thread.java:1444)]) => sink(java.lang.Thread, getContextClassLoader, 1444, $stack5 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:96), at java.lang.Thread.getContextClassLoader(Thread.java:1444)])

source(java.lang.Thread, getContextClassLoader, 1446, $stack4 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:89), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:96), at java.lang.Thread.getContextClassLoader(Thread.java:1446)]) => sink(java.lang.Thread, getContextClassLoader, 1446, $stack4 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:96), at java.lang.Thread.getContextClassLoader(Thread.java:1446)])

source(cz.habarta.typescript.generator.parser.SourceType, <init>, 18, this.<cz.habarta.typescript.generator.parser.SourceType: java.lang.reflect.Type type> = type, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:43), at cz.habarta.typescript.generator.Input.fromClassNamePatterns(Input.java:89), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:100), at cz.habarta.typescript.generator.parser.SourceType.<init>(SourceType.java:18)]) => sink(cz.habarta.typescript.generator.parser.SourceType, <init>, 18, this.<cz.habarta.typescript.generator.parser.SourceType: java.lang.reflect.Type type> = type, [at cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(Input.java:46), at cz.habarta.typescript.generator.Input.fromClassNames(Input.java:100), at cz.habarta.typescript.generator.parser.SourceType.<init>(SourceType.java:18)])

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack8 = new cz.habarta.typescript.generator.Input,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack17 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames),89,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns),43,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack8 = new cz.habarta.typescript.generator.Input,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types), 103)) => Node(<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>,specialinvoke this.<java.lang.Object: void <init>()>(),17,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types), 103) => (<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>, specialinvoke this.<java.lang.Object: void <init>()>(), 17)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack5 = new java.util.ArrayList,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack33 = virtualinvoke $stack32.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(),43,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack33 = virtualinvoke $stack32.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 43)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack5 = new java.util.ArrayList,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack8 = new cz.habarta.typescript.generator.Input,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames),40,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack5 = new java.util.ArrayList,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types = $stack5,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,interfaceinvoke types.<java.util.List: boolean add(java.lang.Object)>($stack16),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, interfaceinvoke types.<java.util.List: boolean add(java.lang.Object)>($stack16), 100)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack16 = new cz.habarta.typescript.generator.parser.SourceType,100,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack8 = new cz.habarta.typescript.generator.Input,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,return $stack8,103,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack5 = new java.util.ArrayList,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack5.<java.util.ArrayList: void <init>()>(),94,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types#2 = $stack18,104,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types#2 = $stack18, 104)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2),105,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack5 = new java.util.ArrayList,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types = $stack5,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types),103,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types), 103)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack7 == 0 goto $stack8 = new cz.habarta.typescript.generator.Input,95,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2),105,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack7 == 0 goto $stack8 = new cz.habarta.typescript.generator.Input,95,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack16 = new cz.habarta.typescript.generator.parser.SourceType,100,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)) => Node(<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>,this := @this: cz.habarta.typescript.generator.parser.SourceType,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)) => Node(<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>,specialinvoke this.<java.lang.Object: void <init>()>(),17,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100) => (<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>, specialinvoke this.<java.lang.Object: void <init>()>(), 17)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack8 = new cz.habarta.typescript.generator.Input,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack17 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames),89,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>,$stack8 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner>,77,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)))

List(Node(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>,$stack7 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner>,67,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43) => (<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>, $stack7 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner>, 67)) => Node(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>,$stack8 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner>,77,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack17 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames),89,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack8 = new cz.habarta.typescript.generator.Input,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types), 103)) => Node(<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>,specialinvoke this.<java.lang.Object: void <init>()>(),17,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types), 103) => (<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>, specialinvoke this.<java.lang.Object: void <init>()>(), 17)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,$stack7 = new java.util.ArrayList,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87) => (<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>, specialinvoke $stack7.<java.util.ArrayList: void <init>()>(), 111)) => Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack7 == 0 goto $stack8 = new cz.habarta.typescript.generator.Input,95,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,$stack7 = new java.util.ArrayList,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87) => (<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>, specialinvoke $stack7.<java.util.ArrayList: void <init>()>(), 111)) => Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input$ClasspathScanner: void <init>()>,this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> = null,64,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack14.<cz.habarta.typescript.generator.Input$ClasspathScanner: void <init>(cz.habarta.typescript.generator.Input$1)>(null), 37) => (<cz.habarta.typescript.generator.Input$ClasspathScanner: void <init>(cz.habarta.typescript.generator.Input$1)>, specialinvoke this.<cz.habarta.typescript.generator.Input$ClasspathScanner: void <init>()>(), 62) => (<cz.habarta.typescript.generator.Input$ClasspathScanner: void <init>()>, this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> = null, 64)) => Node(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>,$stack8 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner>,77,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack16 = new cz.habarta.typescript.generator.parser.SourceType,100,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack8 = new cz.habarta.typescript.generator.Input,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,return $stack8,103,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,$stack7 = new java.util.ArrayList,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87) => (<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>, specialinvoke $stack7.<java.util.ArrayList: void <init>()>(), 111)) => Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack17 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames),89,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack8 = new cz.habarta.typescript.generator.Input,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames),40,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack17 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames),89,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack5 = new java.util.ArrayList,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack5.<java.util.ArrayList: void <init>()>(),94,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)))

List(Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,$stack7 = new java.util.ArrayList,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87) => (<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>, specialinvoke $stack7.<java.util.ArrayList: void <init>()>(), 111)) => Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types#2 = $stack18,104,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types#2 = $stack18, 104)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2),105,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)))

List(Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack7 == 0 goto $stack8 = new cz.habarta.typescript.generator.Input,95,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types = $stack5,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2),105,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack7 == 0 goto $stack8 = new cz.habarta.typescript.generator.Input,95,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(),99,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack13 != 0 goto (branch),99,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack7 == 0 goto $stack8 = new cz.habarta.typescript.generator.Input,95,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(),102,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,if $stack15 != 0 goto (branch),102,SinkNode, path: ))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack16 = new cz.habarta.typescript.generator.parser.SourceType,100,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)) => Node(<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>,this := @this: cz.habarta.typescript.generator.parser.SourceType,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)) => Node(<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>,specialinvoke this.<java.lang.Object: void <init>()>(),17,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100) => (<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>, specialinvoke this.<java.lang.Object: void <init>()>(), 17)))

List(Node(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>,this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> = scanner,75,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43) => (<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>, this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> = scanner, 75)) => Node(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>,$stack8 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner>,77,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)))

List(Node(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>,$stack11 = new io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,70,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43) => (<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>, specialinvoke $stack11.<io.github.lukehutch.fastclasspathscanner.FastClasspathScanner: void <init>(java.lang.String[])>($stack12), 70)) => Node(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>,scanner = virtualinvoke $stack11.<io.github.lukehutch.fastclasspathscanner.FastClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scan()>(),70,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43) => (<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>, scanner = virtualinvoke $stack11.<io.github.lukehutch.fastclasspathscanner.FastClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scan()>(), 70)) => Node(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>,this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> = scanner,75,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43) => (<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>, this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> = scanner, 75)) => Node(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>,$stack8 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner>,77,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)))

List(Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,$stack7 = new java.util.ArrayList,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87) => (<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>, specialinvoke $stack7.<java.util.ArrayList: void <init>()>(), 111)) => Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack17 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames),89,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns),43,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,this := @this: cz.habarta.typescript.generator.Input,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28),46,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types = $stack5,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types),103,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types), 103)))

List(Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types = $stack5,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,interfaceinvoke types.<java.util.List: boolean add(java.lang.Object)>($stack16),100,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, interfaceinvoke types.<java.util.List: boolean add(java.lang.Object)>($stack16), 100)))

