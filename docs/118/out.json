[
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2,210,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2, 210)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2,210,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2, 210))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": 210
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": 210
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack2",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
					"line": 210
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>,781,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>, 781)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>,781,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>, 781))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 781
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 781
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
					"line": 781
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1),102,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types#2 = $stack18,104,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types#2 = $stack18, 104)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1),102,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "types#2 = $stack18",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 104
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 104
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": 102
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": 102
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1)",
				"location": {
					"file": "",
					"class": "java.lang.Exception",
					"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
					"line": 102
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3,784,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3, 784)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3,784,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3, 784))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 784
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 784
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
					"line": 784
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack5 = new java.util.ArrayList,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types = $stack5,94,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)) => Node(<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>,$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>,22,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(),40,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack8 = new cz.habarta.typescript.generator.Input,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames),40,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack8 = new cz.habarta.typescript.generator.Input",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 103
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
	"line": 40
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack5 = new java.util.ArrayList",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 94
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 94
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 94
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
	"line": 22
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
	"line": 40
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>()",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
					"line": 40
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3,227,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3, 227)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3,227,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3, 227))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": 227
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": 227
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack3",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
					"line": 227
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "result = $stack7",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>",
					"line": 111
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>",
	"line": 111
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
	"line": 87
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": -1
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 95
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isAnonymousClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack25 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
					"line": 46
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
	"line": 46
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
	"line": 46
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": -1
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 95
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isAnonymousClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l1 = $stack2",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getName()>",
					"line": 642
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0),783,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0), 783)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0),783,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0), 783))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 783
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 783
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0)",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
					"line": 783
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(), 96)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,l0 := @this: java.lang.Thread,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,$stack2 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>,1439,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34) => (<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>, $stack2 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>, 1439)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(), 96)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,l0 := @this: java.lang.Thread,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,$stack2 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>,1439,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34) => (<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>, $stack2 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>, 1439))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 96
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Thread",
	"method": "<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>",
	"line": -1
},{
	"class": "java.lang.Thread",
	"method": "<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>",
	"line": 1439
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 96
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Thread",
	"method": "<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>",
	"line": -1
},{
	"class": "java.lang.Thread",
	"method": "<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>",
	"line": 1439
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack2 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>",
				"location": {
					"file": "",
					"class": "java.lang.Thread",
					"method": "<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>",
					"line": 1439
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 95
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 95
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isAnonymousClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1306
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack25 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
					"line": 46
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
	"line": 46
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
	"line": 46
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": -1
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 95
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isAnonymousClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1306
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getSimpleName()>",
					"line": 1306
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1),96,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1),96,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": 96
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": 96
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1)",
				"location": {
					"file": "",
					"class": "java.lang.RuntimeException",
					"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
					"line": 96
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack23 = virtualinvoke $stack22.<java.lang.Class: java.lang.String getSimpleName()>(), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack24 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23), 1307)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]"),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('[]'), 1307)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 95
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 95
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isAnonymousClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1307
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>()",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 96
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isAnonymousClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1307
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1307
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1307
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1307
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack25 = virtualinvoke $stack24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('[]')",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getSimpleName()>",
					"line": 1307
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = $stack5,311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = $stack5, 311)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = $stack5,311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = $stack5, 311))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": 311
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": 311
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Throwable: java.lang.String detailMessage> = $stack5",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
					"line": 311
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack6 = l0.<java.lang.String: char[] value>,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack6 = l0.<java.lang.String: char[] value>, 1933)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns)",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
					"line": 87
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
	"line": 87
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": -1
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 95
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isAnonymousClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1933
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack25 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
					"line": 46
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
	"line": 46
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
	"line": 46
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": -1
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 95
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isAnonymousClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1933
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack6 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String substring(int)>",
					"line": 1933
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l0,197,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l0, 197)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l0,197,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l0, 197))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": 197
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": 197
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Throwable: java.lang.Throwable cause> = l0",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
					"line": 197
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l1,312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l1, 312)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,types#2 = $stack18,104,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types#2 = $stack18, 104)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l1 := @parameter0: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l1,312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l1, 312))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "types#2 = $stack18",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 104
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 104
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": 312
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": 312
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Throwable: java.lang.Throwable cause> = l1",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
					"line": 312
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack5 = l0,1933,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19),1312,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack4 = new java.util.ArrayList",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
					"line": 83
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
	"line": 83
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
	"line": 83
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
	"line": 87
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": -1
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 95
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isAnonymousClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1933
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1312
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 95
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 95
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isAnonymousClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1312
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19)",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getSimpleName()>",
					"line": 1312
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Object: void <init>()>(),309,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Object: void <init>()>(), 309)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,specialinvoke l0.<java.lang.Object: void <init>()>(),309,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Object: void <init>()>(), 309))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": 309
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": 309
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.Object: void <init>()>()",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
					"line": 309
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isSynthetic()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)) => Node(<java.lang.Class: boolean isSynthetic()>,$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(),585,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99) => (<java.lang.Class: boolean isSynthetic()>, $stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>(), 585))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns)",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
					"line": 87
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
	"line": 87
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": -1
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 95
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isSynthetic()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isSynthetic()>",
	"line": 585
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack25 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
					"line": 46
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
	"line": 46
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
	"line": 46
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": -1
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 95
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isSynthetic()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isSynthetic()>",
	"line": 585
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = virtualinvoke l0.<java.lang.Class: int getModifiers()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: boolean isSynthetic()>",
					"line": 585
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(),310,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(),310,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": 310
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": 310
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>()",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
					"line": 310
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>,786,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>, 786)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack19 = new java.lang.RuntimeException,105,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.RuntimeException: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)) => Node(<java.lang.Exception: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96)) => Node(<java.lang.Throwable: void <init>(java.lang.Throwable)>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105) => (<java.lang.RuntimeException: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.Throwable)>(l1), 96) => (<java.lang.Exception: void <init>(java.lang.Throwable)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.Throwable)>(l1), 102) => (<java.lang.Throwable: void <init>(java.lang.Throwable)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 310)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>,786,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack20.<java.lang.RuntimeException: void <init>(java.lang.String)>('No input classes found.'), 54) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 265) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>, 786))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 786
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack19 = new java.lang.RuntimeException",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 105
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 105
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>(java.lang.Throwable)>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 786
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
					"line": 786
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack4 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(l1, $stack3),1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,$stack4 = new java.util.ArrayList,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, specialinvoke $stack4.<java.util.ArrayList: void <init>()>(), 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,allClassNames = $stack4,83,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1807,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312) => (<java.lang.String: int lastIndexOf(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1807))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack4 = new java.util.ArrayList",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
					"line": 83
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
	"line": 83
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
	"line": 83
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
	"line": 87
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": -1
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 95
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isAnonymousClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int lastIndexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int lastIndexOf(java.lang.String)>",
	"line": 1807
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 95
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 95
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isAnonymousClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int lastIndexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int lastIndexOf(java.lang.String)>",
	"line": 1807
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack4 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(l1, $stack3)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: int lastIndexOf(java.lang.String)>",
					"line": 1807
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack20 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>($stack19), 1312) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns)",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
					"line": 87
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
	"line": 87
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": -1
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 95
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isAnonymousClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1929
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack25 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
					"line": 46
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
	"line": 46
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
	"line": 46
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": -1
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 95
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isAnonymousClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1929
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack3 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String substring(int)>",
					"line": 1929
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "className = (java.lang.String) $stack9",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 103
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isAnonymousClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": 1443
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 95
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 95
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isAnonymousClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": 1443
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
					"line": 1443
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 96)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>,result = $stack7,111,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>,classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns),87,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "result = $stack7",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>",
					"line": 111
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>",
	"line": 111
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
	"line": 87
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": -1
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 95
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isAnonymousClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack11 = virtualinvoke $stack10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>()",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 96
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isAnonymousClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getSimpleName()>",
					"line": 1311
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(), 96)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,l0 := @this: java.lang.Thread,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,$stack5 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>,1444,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34) => (<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>, $stack5 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>, 1444)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(), 96)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,l0 := @this: java.lang.Thread,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,$stack5 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>,1444,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34) => (<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>, $stack5 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>, 1444))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 96
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Thread",
	"method": "<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>",
	"line": -1
},{
	"class": "java.lang.Thread",
	"method": "<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>",
	"line": 1444
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 96
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Thread",
	"method": "<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>",
	"line": -1
},{
	"class": "java.lang.Thread",
	"method": "<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>",
	"line": 1444
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack5 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>",
				"location": {
					"file": "",
					"class": "java.lang.Thread",
					"method": "<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>",
					"line": 1444
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(), 96)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,l0 := @this: java.lang.Thread,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,$stack4 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>,1446,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>(), 96)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,l0 := @this: java.lang.Thread,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34)) => Node(<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>,$stack4 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>,1446,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, originalContextClassLoader = virtualinvoke $stack11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>(), 34))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 96
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Thread",
	"method": "<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>",
	"line": -1
},{
	"class": "java.lang.Thread",
	"method": "<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>",
	"line": 1446
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 96
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Thread",
	"method": "<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>",
	"line": -1
},{
	"class": "java.lang.Thread",
	"method": "<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>",
	"line": 1446
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack4 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>",
				"location": {
					"file": "",
					"class": "java.lang.Thread",
					"method": "<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>",
					"line": 1446
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack25 = newarray (java.lang.String)[1],46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>,$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25),46,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,classNames := @parameter0: java.util.List,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(),95,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(),103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,className = (java.lang.String) $stack9,103,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)) => Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) SINK=>BASE: Node(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>,cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className),96,SourceNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)) => Node(<java.lang.Class: boolean isAnonymousClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40) => (<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102) => (<java.lang.Class: boolean isAnonymousClass()>, $stack2 = virtualinvoke l0.<java.lang.Class: java.lang.String getSimpleName()>(), 1411) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack4 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1448))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
					"line": 96
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isAnonymousClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 640
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack25 = newarray (java.lang.String)[1]",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.Input",
					"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
					"line": 46
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
	"line": 46
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
	"line": 46
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": -1
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 95
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 103
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
	"line": 96
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: boolean isAnonymousClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 640
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l1 = l0.<java.lang.Class: java.lang.String name>",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getName()>",
					"line": 640
				}
			}
		]
	}
}

,

{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "this.<cz.habarta.typescript.generator.parser.SourceType: java.lang.String usedInMember> - this.<cz.habarta.typescript.generator.parser.SourceType: java.lang.String usedInMember>",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "this.<cz.habarta.typescript.generator.parser.SourceType: java.lang.String usedInMember> = usedInMember",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.parser.SourceType",
					"method": "<init>",
					"line": 20
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "fromClassNamesAndJaxrsApplication",
	"line": 43
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "fromClassNamePatterns",
	"line": 89
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "fromClassNames",
	"line": 100
},{
	"class": "cz.habarta.typescript.generator.parser.SourceType",
	"method": "<init>",
	"line": 20
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "this.<cz.habarta.typescript.generator.parser.SourceType: java.lang.String usedInMember> = usedInMember",
				"location": {
					"file": "",
					"class": "cz.habarta.typescript.generator.parser.SourceType",
					"method": "<init>",
					"line": 20
				},
				"stackTrace": [{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "fromClassNamesAndJaxrsApplication",
	"line": 46
},{
	"class": "cz.habarta.typescript.generator.Input",
	"method": "fromClassNames",
	"line": 100
},{
	"class": "cz.habarta.typescript.generator.parser.SourceType",
	"method": "<init>",
	"line": 20
}]
			}
		]
	}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "classNames := @parameter0: java.util.List",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack13 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack13 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = new cz.habarta.typescript.generator.parser.SourceType",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "100"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "100"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = new java.util.ArrayList",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "94"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "types = $stack5",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "94"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke types.<java.util.List: boolean add(java.lang.Object)>($stack16)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "100"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, interfaceinvoke types.<java.util.List: boolean add(java.lang.Object)>($stack16), 100)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "classNames := @parameter0: java.util.List",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 95)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 == 0 goto $stack8 = new cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack13 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = new java.util.ArrayList",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "94"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "22"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack33 = virtualinvoke $stack32.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "43"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack33 = virtualinvoke $stack32.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 43)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = new cz.habarta.typescript.generator.parser.SourceType",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "100"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.habarta.typescript.generator.parser.SourceType",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.parser.SourceType",
  "method": "<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.parser.SourceType",
  "method": "<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>",
  "line": "17"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)","(<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>, specialinvoke this.<java.lang.Object: void <init>()>(), 17)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "100"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack13 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = new cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "89"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "43"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack13 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = new java.util.ArrayList",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "94"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "22"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = new cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "40"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "22"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 95)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 == 0 goto $stack8 = new cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack19 = new java.lang.RuntimeException",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "105"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "105"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "classNames := @parameter0: java.util.List",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "100"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = new cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack8",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = new java.util.ArrayList",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "94"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<java.util.ArrayList: void <init>()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "94"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = new cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types), 103)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>",
  "line": "17"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types), 103)","(<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>, specialinvoke this.<java.lang.Object: void <init>()>(), 17)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($stack25), 46)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "classNames := @parameter0: java.util.List",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = new cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "89"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "100"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "types#2 = $stack18",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "104"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types#2 = $stack18, 104)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "105"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "100"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = new java.util.ArrayList",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "94"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "types = $stack5",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "94"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types), 103)"]
}]
}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack13 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "87"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "classNames := @parameter0: java.util.List",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "100"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = new java.util.ArrayList",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>",
  "line": "111"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)","(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>, specialinvoke $stack7.<java.util.ArrayList: void <init>()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack7",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>",
  "line": "111"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "87"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "classNames := @parameter0: java.util.List",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 95)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 == 0 goto $stack8 = new cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = new cz.habarta.typescript.generator.parser.SourceType",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "100"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "100"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "43"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "43"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "22"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "allClassNames = $stack4",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "83"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "87"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "89"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "43"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "22"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack13 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = new java.util.ArrayList",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>",
  "line": "111"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)","(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>, specialinvoke $stack7.<java.util.ArrayList: void <init>()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack7",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>",
  "line": "111"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "87"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "classNames := @parameter0: java.util.List",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack13 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = new cz.habarta.typescript.generator.parser.SourceType",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "100"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.habarta.typescript.generator.parser.SourceType",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.parser.SourceType",
  "method": "<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.parser.SourceType",
  "method": "<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>",
  "line": "17"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)","(<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>, specialinvoke this.<java.lang.Object: void <init>()>(), 17)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "allClassNames = $stack4",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "83"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "87"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "classNames := @parameter0: java.util.List",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "100"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "100"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> = scanner",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input$ClasspathScanner",
  "method": "<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>",
  "line": "75"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)","(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>, this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> = scanner, 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input$ClasspathScanner",
  "method": "<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>",
  "line": "77"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "43"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "43"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "22"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack13 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack13 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input$ClasspathScanner",
  "method": "<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>",
  "line": "77"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "43"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "43"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "22"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 95)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 == 0 goto $stack8 = new cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = new io.github.lukehutch.fastclasspathscanner.FastClasspathScanner",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input$ClasspathScanner",
  "method": "<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>",
  "line": "70"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)","(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>, specialinvoke $stack11.<io.github.lukehutch.fastclasspathscanner.FastClasspathScanner: void <init>(java.lang.String[])>($stack12), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "scanner = virtualinvoke $stack11.<io.github.lukehutch.fastclasspathscanner.FastClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scan()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input$ClasspathScanner",
  "method": "<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>",
  "line": "70"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)","(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>, scanner = virtualinvoke $stack11.<io.github.lukehutch.fastclasspathscanner.FastClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scan()>(), 70)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> = scanner",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input$ClasspathScanner",
  "method": "<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>",
  "line": "75"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)","(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>, this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> = scanner, 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input$ClasspathScanner",
  "method": "<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>",
  "line": "77"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "43"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "43"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "22"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = new java.util.ArrayList",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>",
  "line": "111"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)","(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>, specialinvoke $stack7.<java.util.ArrayList: void <init>()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack7",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>",
  "line": "111"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "87"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "89"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "43"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "22"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "types = $stack5",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "94"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "22"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "87"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "classNames := @parameter0: java.util.List",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack13 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack19 = new java.lang.RuntimeException",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "105"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "105"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "22"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "allClassNames = $stack4",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "83"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "87"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "classNames := @parameter0: java.util.List",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = new cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack8",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = new java.util.ArrayList",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "94"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack5.<java.util.ArrayList: void <init>()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "94"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack5.<java.util.ArrayList: void <init>()>(), 94)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "87"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "classNames := @parameter0: java.util.List",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 95)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 == 0 goto $stack8 = new cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = new cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types), 103)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>",
  "line": "17"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types), 103)","(<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>, specialinvoke this.<java.lang.Object: void <init>()>(), 17)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "87"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "89"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "43"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "22"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> = null",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input$ClasspathScanner",
  "method": "<cz.habarta.typescript.generator.Input$ClasspathScanner: void <init>()>",
  "line": "64"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, specialinvoke $stack14.<cz.habarta.typescript.generator.Input$ClasspathScanner: void <init>(cz.habarta.typescript.generator.Input$1)>(null), 37)","(<cz.habarta.typescript.generator.Input$ClasspathScanner: void <init>(cz.habarta.typescript.generator.Input$1)>, specialinvoke this.<cz.habarta.typescript.generator.Input$ClasspathScanner: void <init>()>(), 62)","(<cz.habarta.typescript.generator.Input$ClasspathScanner: void <init>()>, this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner> = null, 64)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input$ClasspathScanner",
  "method": "<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>",
  "line": "77"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "43"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "43"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "22"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "allClassNames = $stack4",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "83"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "87"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "classNames := @parameter0: java.util.List",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack7 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>(), 95)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack7 == 0 goto $stack8 = new cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input$ClasspathScanner",
  "method": "<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>",
  "line": "67"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)","(<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>, $stack7 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner>, 67)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = this.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner fastClasspathScanner>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input$ClasspathScanner",
  "method": "<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>",
  "line": "77"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "43"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack31 = virtualinvoke classpathScanner.<cz.habarta.typescript.generator.Input$ClasspathScanner: io.github.lukehutch.fastclasspathscanner.FastClasspathScanner scanClasspath()>(), 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "43"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "22"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = new java.util.ArrayList",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>",
  "line": "111"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)","(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>, specialinvoke $stack7.<java.util.ArrayList: void <init>()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack7",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>",
  "line": "111"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "87"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "classNames := @parameter0: java.util.List",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "types = $stack5",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "94"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke types.<java.util.List: boolean add(java.lang.Object)>($stack16)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "100"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, interfaceinvoke types.<java.util.List: boolean add(java.lang.Object)>($stack16), 100)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "87"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "classNames := @parameter0: java.util.List",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "allClassNames = $stack4",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "83"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, allClassNames = $stack4, 83)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "87"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "classNames := @parameter0: java.util.List",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack13 = virtualinvoke cls.<java.lang.Class: boolean isSynthetic()>(), 99)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack13 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "types = $stack5",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "94"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types = $stack5, 94)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack8.<cz.habarta.typescript.generator.Input: void <init>(java.util.List)>(types), 103)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "100"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack17 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "89"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "43"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "22"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = new cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "40"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: cz.habarta.typescript.generator.Input",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>",
  "line": "22"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack37 = virtualinvoke $stack36.<cz.habarta.typescript.generator.Input: java.util.List getSourceTypes()>(), 40)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack28 = $stack27.<cz.habarta.typescript.generator.Input: java.util.List sourceTypes>, 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>",
  "line": "46"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, interfaceinvoke types.<java.util.List: boolean addAll(java.util.Collection)>($stack28), 46)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "types#2 = $stack18",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "104"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, types#2 = $stack18, 104)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "105"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(types#2), 105)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = new java.util.ArrayList",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>",
  "line": "111"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)","(<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>, specialinvoke $stack7.<java.util.ArrayList: void <init>()>(), 111)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack7",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>",
  "line": "111"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>",
  "line": "87"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack32 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>($stack31, classNamePatterns), 43)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamePatterns(io.github.lukehutch.fastclasspathscanner.FastClasspathScanner,java.util.List)>, classNames = staticinvoke <cz.habarta.typescript.generator.Input: java.util.List filterClassNames(java.util.List,java.util.List)>(allClassNames, classNamePatterns), 87)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "classNames := @parameter0: java.util.List",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "-1"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "95"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, l2 = interfaceinvoke classNames.<java.util.List: java.util.Iterator iterator()>(), 95)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack9 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>(), 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "className = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "103"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, className = (java.lang.String) $stack9, 103)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "100"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>()",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, $stack15 = virtualinvoke cls.<java.lang.Class: boolean isAnonymousClass()>(), 102)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 != 0 goto (branch)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "102"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "96"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, cls = virtualinvoke $stack11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(className), 96)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null)",
"location": {
  "file": "",
  "class": "cz.habarta.typescript.generator.Input",
  "method": "<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>",
  "line": "100"
},
"stackTrace": ["(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNamesAndJaxrsApplication(java.util.List,java.util.List,java.lang.String,boolean,cz.habarta.typescript.generator.util.Predicate,java.lang.ClassLoader)>, $stack36 = staticinvoke <cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>(classNames), 40)","(<cz.habarta.typescript.generator.Input: cz.habarta.typescript.generator.Input fromClassNames(java.util.List)>, specialinvoke $stack16.<cz.habarta.typescript.generator.parser.SourceType: void <init>(java.lang.reflect.Type,java.lang.Class,java.lang.String)>(cls, null, null), 100)"]
}]
}
}

]
