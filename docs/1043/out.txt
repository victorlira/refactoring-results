List(Node(<org.jgrapht.generate.HyperCubeGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,newVertex = interfaceinvoke target.<org.jgrapht.Graph: java.lang.Object addVertex()>(),60,SourceNode, path: (<org.jgrapht.generate.HyperCubeGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, newVertex = interfaceinvoke target.<org.jgrapht.Graph: java.lang.Object addVertex()>(), 60)) => Node(<org.jgrapht.generate.HyperCubeGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,interfaceinvoke resultMap.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack32, newVertex),68,SinkNode, path: (<org.jgrapht.generate.HyperCubeGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, interfaceinvoke resultMap.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack32, newVertex), 68)))

List(Node(<org.jgrapht.generate.HyperCubeGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,newVertex = interfaceinvoke target.<org.jgrapht.Graph: java.lang.Object addVertex()>(),60,SourceNode, path: (<org.jgrapht.generate.HyperCubeGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, newVertex = interfaceinvoke target.<org.jgrapht.Graph: java.lang.Object addVertex()>(), 60)) => Node(<org.jgrapht.generate.HyperCubeGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,interfaceinvoke resultMap.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack32, newVertex),68,SinkNode, path: (<org.jgrapht.generate.HyperCubeGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, interfaceinvoke resultMap.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack32, newVertex), 68)))

