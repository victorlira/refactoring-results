[
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,specialinvoke $stack2.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1),687,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, specialinvoke $stack2.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1), 687)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack3 = l0.<java.lang.String: char[] value>,687,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack3 = l0.<java.lang.String: char[] value>, 687)) => Node(<java.lang.String: int codePointAt(int)>,$stack4 = lengthof $stack3,687,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack4 = lengthof $stack3, 687))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": 687
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": 687
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 91
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2575
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2579
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2579
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": 687
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack2.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: int codePointAt(int)>",
					"line": 687
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack41 = l12 + l5,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.Character: int toChars(int,char[],int)>,l2 := @parameter2: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.Character: void toSurrogates(int,char[],int)>,l2 := @parameter2: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626) => (<java.lang.Character: int toChars(int,char[],int)>, staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2), 5141)) => Node(<java.lang.Character: void toSurrogates(int,char[],int)>,$stack3 = l2 + 1,5178,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626) => (<java.lang.Character: int toChars(int,char[],int)>, staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2), 5141) => (<java.lang.Character: void toSurrogates(int,char[],int)>, $stack3 = l2 + 1, 5178)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack41 = l12 + l5,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.Character: int toChars(int,char[],int)>,l2 := @parameter2: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.Character: void toSurrogates(int,char[],int)>,l2 := @parameter2: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626) => (<java.lang.Character: int toChars(int,char[],int)>, staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2), 5141)) => Node(<java.lang.Character: void toSurrogates(int,char[],int)>,$stack3 = l2 + 1,5178,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626) => (<java.lang.Character: int toChars(int,char[],int)>, staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2), 5141) => (<java.lang.Character: void toSurrogates(int,char[],int)>, $stack3 = l2 + 1, 5178))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2595
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2590
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2637
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int toChars(int,char[],int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: void toSurrogates(int,char[],int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: void toSurrogates(int,char[],int)>",
	"line": 5178
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept')",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 81
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2616
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int toChars(int,char[],int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: void toSurrogates(int,char[],int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: void toSurrogates(int,char[],int)>",
	"line": 5178
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack3 = l2 + 1",
				"location": {
					"file": "",
					"class": "java.lang.Character",
					"method": "<java.lang.Character: void toSurrogates(int,char[],int)>",
					"line": 5178
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,61,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),94,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filter = (spark.Filter) filterTarget,99,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filter = (spark.Filter) filterTarget, 99)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,61,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),94,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filter = (spark.Filter) filterTarget,99,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filter = (spark.Filter) filterTarget, 99))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.Object getTarget()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.Object getTarget()>",
	"line": 61
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 94
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 99
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 91
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.Object getTarget()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.Object getTarget()>",
	"line": 61
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 94
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 99
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "filter = (spark.Filter) filterTarget",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 99
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String requestURI>,77,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j),411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j), 411)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack30 = (java.lang.String) $stack29,411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack30 = (java.lang.String) $stack29, 411)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j),411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j), 411))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 411
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept')",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 81
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getRequestURI()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getRequestURI()>",
	"line": 77
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 411
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 411
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack30 = (java.lang.String) $stack29",
				"location": {
					"file": "",
					"class": "spark.Request",
					"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
					"line": 411
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + 1,2584,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.String: int codePointAt(int)>,$stack6 = lengthof $stack5,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack6 = lengthof $stack5, 689)) => Node(<java.lang.String: int codePointAt(int)>,$stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6),689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": 689
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": 689
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": 689
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2608
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2609
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2604
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 91
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2575
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2579
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2579
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2584
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2604
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l12 = l2",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2604
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.Character: int toLowerCase(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack72 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l5), 2576)) => Node(<java.lang.Character: int toLowerCase(int)>,$stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0),6338,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack72 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l5), 2576) => (<java.lang.Character: int toLowerCase(int)>, $stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0), 6338)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2572,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2572)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4 = $stack16[l2],2572,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4 = $stack16[l2], 2572)) => Node(<java.lang.Character: char toLowerCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack17 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l4), 2581)) => Node(<java.lang.Character: int toLowerCase(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack72 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l5), 2576)) => Node(<java.lang.Character: int toLowerCase(int)>,$stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0),6338,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack72 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l5), 2576) => (<java.lang.Character: int toLowerCase(int)>, $stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0), 6338))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2572
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2572
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: char toLowerCase(char)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int toLowerCase(int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int toLowerCase(int)>",
	"line": 6338
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept')",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 81
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int toLowerCase(int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int toLowerCase(int)>",
	"line": 6338
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0)",
				"location": {
					"file": "",
					"class": "java.lang.Character",
					"method": "<java.lang.Character: int toLowerCase(int)>",
					"line": 6338
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String requestURI>,77,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack25 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(i),386,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack25 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(i), 386)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack24 = virtualinvoke matchedPart.<java.lang.String: java.lang.String toLowerCase()>(),386,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack24 = virtualinvoke matchedPart.<java.lang.String: java.lang.String toLowerCase()>(), 386))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 386
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept')",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 81
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getRequestURI()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getRequestURI()>",
	"line": 77
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 386
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack25 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(i)",
				"location": {
					"file": "",
					"class": "spark.Request",
					"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
					"line": 386
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(l1, l2, $stack6),207,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(l1, l2, $stack6), 207)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(l1, l2, $stack6),207,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(l1, l2, $stack6), 207))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2595
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2590
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2637
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 207
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 156
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2616
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2629
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2633
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2637
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 207
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(l1, l2, $stack6)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: void <init>(char[],int,int)>",
					"line": 207
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2567,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2567)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l3 = lengthof $stack15,2567,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l3 = lengthof $stack15, 2567)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2595
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2590
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 156
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2567
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2567
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2590
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l4#4 = newarray (char)[l3]",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2590
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String requestURI>,77,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,nbrOfRequestParts = interfaceinvoke request.<java.util.List: int size()>(),395,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, nbrOfRequestParts = interfaceinvoke request.<java.util.List: int size()>(), 395)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,nbrOfRequestParts = interfaceinvoke request.<java.util.List: int size()>(),395,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, nbrOfRequestParts = interfaceinvoke request.<java.util.List: int size()>(), 395))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 395
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 156
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getRequestURI()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getRequestURI()>",
	"line": 77
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 395
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "nbrOfRequestParts = interfaceinvoke request.<java.util.List: int size()>()",
				"location": {
					"file": "",
					"class": "spark.Request",
					"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
					"line": 395
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filter = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest),132,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filter = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 132)) => Node(<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>,delegate := @parameter0: spark.Request,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke req.<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>(request), 101)) => Node(<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>,this.<spark.webserver.RequestWrapper: spark.Request delegate> = delegate,33,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke req.<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>(request), 101) => (<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>, this.<spark.webserver.RequestWrapper: spark.Request delegate> = delegate, 33)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest),96,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>,delegate := @parameter0: spark.Request,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke req.<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>(request), 101)) => Node(<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>,this.<spark.webserver.RequestWrapper: spark.Request delegate> = delegate,33,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke req.<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>(request), 101) => (<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>, this.<spark.webserver.RequestWrapper: spark.Request delegate> = delegate, 33))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 96
},{
	"class": "spark.webserver.RequestWrapper",
	"method": "<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>",
	"line": -1
},{
	"class": "spark.webserver.RequestWrapper",
	"method": "<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>",
	"line": 33
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 117
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 132
},{
	"class": "spark.webserver.RequestWrapper",
	"method": "<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>",
	"line": -1
},{
	"class": "spark.webserver.RequestWrapper",
	"method": "<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>",
	"line": 33
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "this.<spark.webserver.RequestWrapper: spark.Request delegate> = delegate",
				"location": {
					"file": "",
					"class": "spark.webserver.RequestWrapper",
					"method": "<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>",
					"line": 33
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack7 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack7 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l4 = l0[l1#2],4937,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, l4 = l0[l1#2], 4937)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack7 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack7 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l4 = l0[l1#2],4937,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, l4 = l0[l1#2], 4937))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": 689
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": 4937
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 117
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": 689
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": 4937
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l4 = l0[l1#2]",
				"location": {
					"file": "",
					"class": "java.lang.Character",
					"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
					"line": 4937
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String requestURI>,77,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack7 = interfaceinvoke request.<java.util.List: int size()>(),379,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack7 = interfaceinvoke request.<java.util.List: int size()>(), 379)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack7 = interfaceinvoke request.<java.util.List: int size()>(),379,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack7 = interfaceinvoke request.<java.util.List: int size()>(), 379))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 379
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept')",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 81
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getRequestURI()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getRequestURI()>",
	"line": 77
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 379
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack7 = interfaceinvoke request.<java.util.List: int size()>()",
				"location": {
					"file": "",
					"class": "spark.Request",
					"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
					"line": 379
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2572,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2572)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2572,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2572)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4 = $stack16[l2],2572,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4 = $stack16[l2], 2572))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2572
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2572
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 156
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2572
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack16 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2572
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyAfterFilter#53 = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(response#51, httpRequest),161,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyAfterFilter#53 = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(response#51, httpRequest), 161)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyAfterFilter#53 = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(response#51, httpRequest),161,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyAfterFilter#53 = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(response#51, httpRequest), 161))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 161
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 156
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 161
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "bodyAfterFilter#53 = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(response#51, httpRequest)",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 161
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 91
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>",
				"location": {
					"file": "",
					"class": "spark.route.RouteMatch",
					"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
					"line": 69
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request),29,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request),29,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 29
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 117
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 29
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request)",
				"location": {
					"file": "",
					"class": "spark.RequestResponseFactory",
					"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
					"line": 29
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest),96,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest),96,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 96
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 91
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 96
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest)",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 96
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String requestURI>,77,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String requestURI>,77,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getRequestURI()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getRequestURI()>",
	"line": 77
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept')",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 81
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getRequestURI()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getRequestURI()>",
	"line": 77
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = this.<spark.route.RouteMatch: java.lang.String requestURI>",
				"location": {
					"file": "",
					"class": "spark.route.RouteMatch",
					"method": "<spark.route.RouteMatch: java.lang.String getRequestURI()>",
					"line": 77
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 156
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "matchedPart = (java.lang.String) $stack11",
				"location": {
					"file": "",
					"class": "spark.Request",
					"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
					"line": 380
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0),2422,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l3 = pathArray,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l3 = pathArray, 36)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l4 = lengthof l3,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l4 = lengthof l3, 36)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l3 = pathArray,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l3 = pathArray, 36)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l4 = lengthof l3,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l4 = lengthof l3, 36))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 34
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 36
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 36
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 156
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": 2422
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 34
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 36
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 36
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l4 = lengthof l3",
				"location": {
					"file": "",
					"class": "spark.utils.SparkUtils",
					"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
					"line": 36
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String requestURI>,77,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j),411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j), 411)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack30 = (java.lang.String) $stack29,411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack30 = (java.lang.String) $stack29, 411)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,splatParam = $stack20,407,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, splatParam = $stack20, 407)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,virtualinvoke splatParam.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/"),410,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, virtualinvoke splatParam.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('/'), 410)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j),411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j), 411)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack30 = (java.lang.String) $stack29,411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack30 = (java.lang.String) $stack29, 411)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,splatParam = $stack20,407,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, splatParam = $stack20, 407)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,virtualinvoke splatParam.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/"),410,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, virtualinvoke splatParam.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('/'), 410))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 411
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 411
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 407
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 410
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 91
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getRequestURI()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getRequestURI()>",
	"line": 77
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 411
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 411
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 407
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 410
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke splatParam.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('/')",
				"location": {
					"file": "",
					"class": "spark.Request",
					"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
					"line": 410
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack10 = lengthof l1,198,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack10 = lengthof l1, 198)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack10 = lengthof l1,198,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack10 = lengthof l1, 198))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2595
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2590
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2637
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 198
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 156
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2616
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2629
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2633
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2637
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 198
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack10 = lengthof l1",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: void <init>(char[],int,int)>",
					"line": 198
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack7 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack7 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l3 = l0[l1],4935,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack7 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack7 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l3 = l0[l1],4935,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": 689
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": 4935
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 91
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": 689
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": 4935
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l3 = l0[l1]",
				"location": {
					"file": "",
					"class": "java.lang.Character",
					"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
					"line": 4935
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": 2670
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 91
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": 2670
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase()>",
					"line": 2670
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack39 = l12 + l5,2636,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack39 = l12 + l5, 2636)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(l4#4, 0, l14, 0, $stack39),2636,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(l4#4, 0, l14, 0, $stack39), 2636)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack28,2642,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack39 = l12 + l5,2636,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack39 = l12 + l5, 2636))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2595
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2590
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2637
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2642
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2636
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 117
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2616
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2636
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2636
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(l4#4, 0, l14, 0, $stack39)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2636
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 403)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack16,403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack16, 403)) => Node(<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>,routePart := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart), 405)) => Node(<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>,$stack1 = virtualinvoke routePart.<java.lang.String: boolean equals(java.lang.Object)>("*"),49,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart), 405)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart),405,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart), 405)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 403)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack16,403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack16, 403)) => Node(<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>,routePart := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart), 405)) => Node(<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>,$stack1 = virtualinvoke routePart.<java.lang.String: boolean equals(java.lang.Object)>("*"),49,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart), 405)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart),405,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart), 405))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 403
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 403
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>",
	"line": 49
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 405
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept')",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 81
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 403
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 403
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>",
	"line": 49
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 405
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart)",
				"location": {
					"file": "",
					"class": "spark.Request",
					"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
					"line": 405
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 91
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "filterMatch = (spark.route.RouteMatch) $stack96",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 127
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2567,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2567)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l3 = lengthof $stack15,2567,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l3 = lengthof $stack15, 2567)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack20, 0, l4#4, 0, l2),2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack20, 0, l4#4, 0, l2), 2595)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack20, 0, l4#4, 0, l2),2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack20, 0, l4#4, 0, l2), 2595))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2595
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2595
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 117
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2567
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2567
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2590
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2595
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack20, 0, l4#4, 0, l2)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2595
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2567,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2567)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2567,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2567))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2567
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 117
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2567
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack15 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2567
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack53 = l12 + l5,2644,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack53 = l12 + l5, 2644)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack53 = l12 + l5,2644,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack53 = l12 + l5, 2644))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2595
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2590
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2637
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2644
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 156
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2616
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2644
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack53 = l12 + l5",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2644
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(), 94)) => Node(<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>,$stack1 = this.<spark.route.RouteMatch: spark.route.HttpMethod httpMethod>,54,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(), 94)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(), 94)) => Node(<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>,$stack1 = this.<spark.route.RouteMatch: spark.route.HttpMethod httpMethod>,54,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(), 94))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>",
	"line": 54
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 156
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>",
	"line": 54
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = this.<spark.route.RouteMatch: spark.route.HttpMethod httpMethod>",
				"location": {
					"file": "",
					"class": "spark.route.RouteMatch",
					"method": "<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>",
					"line": 54
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0),2422,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l3 = pathArray,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l3 = pathArray, 36)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,p = l3[l5],41,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, p = l3[l5], 41)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,interfaceinvoke path.<java.util.List: boolean add(java.lang.Object)>(p),38,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, interfaceinvoke path.<java.util.List: boolean add(java.lang.Object)>(p), 38)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l3 = pathArray,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l3 = pathArray, 36)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,p = l3[l5],41,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, p = l3[l5], 41)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,interfaceinvoke path.<java.util.List: boolean add(java.lang.Object)>(p),38,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, interfaceinvoke path.<java.util.List: boolean add(java.lang.Object)>(p), 38))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 34
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 36
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 41
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 38
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 117
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": 2422
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 34
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 36
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 41
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 38
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "interfaceinvoke path.<java.util.List: boolean add(java.lang.Object)>(p)",
				"location": {
					"file": "",
					"class": "spark.utils.SparkUtils",
					"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
					"line": 38
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack7 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack7 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l3 = l0[l1],4935,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,$stack5 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l3),4936,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, $stack5 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l3), 4936)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack7 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack7 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l3 = l0[l1],4935,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,$stack5 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l3),4936,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, $stack5 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l3), 4936))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": 689
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": 4935
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": 4936
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 117
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": 689
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": 4935
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": 4936
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack5 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l3)",
				"location": {
					"file": "",
					"class": "java.lang.Character",
					"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
					"line": 4936
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,nbrOfMatchedParts = interfaceinvoke matched.<java.util.List: int size()>(),396,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, nbrOfMatchedParts = interfaceinvoke matched.<java.util.List: int size()>(), 396)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack25 = nbrOfMatchedParts - 1,402,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack25 = nbrOfMatchedParts - 1, 402)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,nbrOfMatchedParts = interfaceinvoke matched.<java.util.List: int size()>(),396,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, nbrOfMatchedParts = interfaceinvoke matched.<java.util.List: int size()>(), 396)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack25 = nbrOfMatchedParts - 1,402,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack25 = nbrOfMatchedParts - 1, 402))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 396
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 402
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 156
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 396
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 402
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack25 = nbrOfMatchedParts - 1",
				"location": {
					"file": "",
					"class": "spark.Request",
					"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
					"line": 402
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack4 = lengthof l1,204,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack4 = lengthof l1, 204)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack5 = $stack4 - l3,204,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack5 = $stack4 - l3, 204)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack4 = lengthof l1,204,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack4 = lengthof l1, 204)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack5 = $stack4 - l3,204,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack5 = $stack4 - l3, 204))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2595
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2590
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2637
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 204
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 204
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 117
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2616
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2629
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2633
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2637
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 204
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: void <init>(char[],int,int)>",
	"line": 204
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack5 = $stack4 - l3",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: void <init>(char[],int,int)>",
					"line": 204
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0),2422,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l3 = pathArray,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l3 = pathArray, 36)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,p = l3[l5],41,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, p = l3[l5], 41)) => Node(<java.lang.String: int length()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, $stack9 = virtualinvoke p.<java.lang.String: int length()>(), 37)) => Node(<java.lang.String: int length()>,$stack1 = l0.<java.lang.String: char[] value>,623,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, $stack9 = virtualinvoke p.<java.lang.String: int length()>(), 37) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l3 = pathArray,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l3 = pathArray, 36)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,p = l3[l5],41,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, p = l3[l5], 41)) => Node(<java.lang.String: int length()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, $stack9 = virtualinvoke p.<java.lang.String: int length()>(), 37)) => Node(<java.lang.String: int length()>,$stack1 = l0.<java.lang.String: char[] value>,623,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, $stack9 = virtualinvoke p.<java.lang.String: int length()>(), 37) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 34
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 36
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 41
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": 623
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 156
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": 2422
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 34
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 36
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 41
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": 623
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: int length()>",
					"line": 623
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack7 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack7 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l4 = l0[l1#2],4937,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, l4 = l0[l1#2], 4937)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,$stack8 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(l3, l4),4939,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack7 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack7 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l4 = l0[l1#2],4937,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, l4 = l0[l1#2], 4937)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,$stack8 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(l3, l4),4939,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": 689
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": 4937
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": 4939
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 156
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": 689
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": 4937
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": 4939
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack8 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(l3, l4)",
				"location": {
					"file": "",
					"class": "java.lang.Character",
					"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
					"line": 4939
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyAfterFilter#53 = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(response#51, httpRequest),161,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyAfterFilter#53 = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(response#51, httpRequest), 161)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,virtualinvoke req.<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>(bodyAfterFilter#53),164,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke req.<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>(bodyAfterFilter#53), 164)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyAfterFilter#53 = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(response#51, httpRequest),161,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyAfterFilter#53 = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(response#51, httpRequest), 161)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,virtualinvoke req.<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>(bodyAfterFilter#53),164,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke req.<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>(bodyAfterFilter#53), 164))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 161
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 164
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 156
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 161
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 164
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke req.<spark.webserver.RequestWrapper: void setDelegate(spark.Request)>(bodyAfterFilter#53)",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 164
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 689)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 689))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": 689
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 117
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": 689
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack5 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: int codePointAt(int)>",
					"line": 689
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack9 = interfaceinvoke matched.<java.util.List: int size()>(),389,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack9 = interfaceinvoke matched.<java.util.List: int size()>(), 389)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack9 = interfaceinvoke matched.<java.util.List: int size()>(),389,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack9 = interfaceinvoke matched.<java.util.List: int size()>(), 389))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 389
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 117
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 389
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack9 = interfaceinvoke matched.<java.util.List: int size()>()",
				"location": {
					"file": "",
					"class": "spark.Request",
					"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
					"line": 389
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack7 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack7 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l4 = l0[l1#2],4937,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, l4 = l0[l1#2], 4937)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,$stack7 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(l4),4938,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, $stack7 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(l4), 4938)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack7 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack7 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l4 = l0[l1#2],4937,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, l4 = l0[l1#2], 4937)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,$stack7 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(l4),4938,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, $stack7 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(l4), 4938))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": 689
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": 4937
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": 4938
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept')",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 81
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": 689
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": 4937
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": 4938
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack7 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(l4)",
				"location": {
					"file": "",
					"class": "java.lang.Character",
					"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
					"line": 4938
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 403)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack16,403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack16, 403)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 403)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack16,403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack16, 403))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 403
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 403
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept')",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 81
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 403
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 403
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "matchedPart = (java.lang.String) $stack16",
				"location": {
					"file": "",
					"class": "spark.Request",
					"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
					"line": 403
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 403)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack16,403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack16, 403)) => Node(<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>,routePart := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart), 405)) => Node(<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>,$stack1 = virtualinvoke routePart.<java.lang.String: boolean equals(java.lang.Object)>("*"),49,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart), 405)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack16 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 403)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack16,403,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack16, 403)) => Node(<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>,routePart := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart), 405)) => Node(<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>,$stack1 = virtualinvoke routePart.<java.lang.String: boolean equals(java.lang.Object)>("*"),49,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack17 = staticinvoke <spark.utils.SparkUtils: boolean isSplat(java.lang.String)>(matchedPart), 405))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 403
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 403
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>",
	"line": 49
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 91
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 403
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 403
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>",
	"line": 49
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = virtualinvoke routePart.<java.lang.String: boolean equals(java.lang.Object)>('*')",
				"location": {
					"file": "",
					"class": "spark.utils.SparkUtils",
					"method": "<spark.utils.SparkUtils: boolean isSplat(java.lang.String)>",
					"line": 49
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack31 = l12 + l5,2640,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack31 = l12 + l5, 2640)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack33 = $stack31 + l14#27,2640,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack33 = $stack31 + l14#27, 2640)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack31 = l12 + l5,2640,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack31 = l12 + l5, 2640))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2595
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2590
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2637
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2640
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 156
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2616
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2640
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2640
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack33 = $stack31 + l14#27",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2640
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack25 = (char) l10,2606,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack25 = (char) l10, 2606)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack25 = (char) l10,2606,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack25 = (char) l10, 2606))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2606
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 91
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2606
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack25 = (char) l10",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2606
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0),2422,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l3 = pathArray,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l3 = pathArray, 36)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,p = l3[l5],41,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, p = l3[l5], 41)) => Node(<java.lang.String: int length()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, $stack9 = virtualinvoke p.<java.lang.String: int length()>(), 37)) => Node(<java.lang.String: int length()>,$stack1 = l0.<java.lang.String: char[] value>,623,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, $stack9 = virtualinvoke p.<java.lang.String: int length()>(), 37) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)) => Node(<java.lang.String: int length()>,$stack2 = lengthof $stack1,623,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, $stack9 = virtualinvoke p.<java.lang.String: int length()>(), 37)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,$stack9 = virtualinvoke p.<java.lang.String: int length()>(),37,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, $stack9 = virtualinvoke p.<java.lang.String: int length()>(), 37)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l3 = pathArray,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l3 = pathArray, 36)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,p = l3[l5],41,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, p = l3[l5], 41)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,$stack9 = virtualinvoke p.<java.lang.String: int length()>(),37,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, $stack9 = virtualinvoke p.<java.lang.String: int length()>(), 37))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 34
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 36
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 41
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 37
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 91
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": 2422
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 34
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 36
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 41
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": 623
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int length()>",
	"line": 623
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 37
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack9 = virtualinvoke p.<java.lang.String: int length()>()",
				"location": {
					"file": "",
					"class": "spark.utils.SparkUtils",
					"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
					"line": 37
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<spark.utils.SparkUtils: boolean isParam(java.lang.String)>,routePart := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack12 = staticinvoke <spark.utils.SparkUtils: boolean isParam(java.lang.String)>(matchedPart), 381)) => Node(<spark.utils.SparkUtils: boolean isParam(java.lang.String)>,$stack1 = virtualinvoke routePart.<java.lang.String: boolean startsWith(java.lang.String)>(":"),45,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack12 = staticinvoke <spark.utils.SparkUtils: boolean isParam(java.lang.String)>(matchedPart), 381)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack12 = staticinvoke <spark.utils.SparkUtils: boolean isParam(java.lang.String)>(matchedPart),381,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack12 = staticinvoke <spark.utils.SparkUtils: boolean isParam(java.lang.String)>(matchedPart), 381)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack12 = staticinvoke <spark.utils.SparkUtils: boolean isParam(java.lang.String)>(matchedPart),381,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack12 = staticinvoke <spark.utils.SparkUtils: boolean isParam(java.lang.String)>(matchedPart), 381))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 381
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept')",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 81
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: boolean isParam(java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: boolean isParam(java.lang.String)>",
	"line": 45
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 381
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack12 = staticinvoke <spark.utils.SparkUtils: boolean isParam(java.lang.String)>(matchedPart)",
				"location": {
					"file": "",
					"class": "spark.Request",
					"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
					"line": 381
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String requestURI>,77,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 117
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getRequestURI()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getRequestURI()>",
	"line": 77
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.Request",
					"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
					"line": 97
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<spark.utils.SparkUtils: boolean isParam(java.lang.String)>,routePart := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack12 = staticinvoke <spark.utils.SparkUtils: boolean isParam(java.lang.String)>(matchedPart), 381)) => Node(<spark.utils.SparkUtils: boolean isParam(java.lang.String)>,$stack1 = virtualinvoke routePart.<java.lang.String: boolean startsWith(java.lang.String)>(":"),45,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack12 = staticinvoke <spark.utils.SparkUtils: boolean isParam(java.lang.String)>(matchedPart), 381)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<spark.utils.SparkUtils: boolean isParam(java.lang.String)>,routePart := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack12 = staticinvoke <spark.utils.SparkUtils: boolean isParam(java.lang.String)>(matchedPart), 381)) => Node(<spark.utils.SparkUtils: boolean isParam(java.lang.String)>,$stack1 = virtualinvoke routePart.<java.lang.String: boolean startsWith(java.lang.String)>(":"),45,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack12 = staticinvoke <spark.utils.SparkUtils: boolean isParam(java.lang.String)>(matchedPart), 381))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: boolean isParam(java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: boolean isParam(java.lang.String)>",
	"line": 45
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 91
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: boolean isParam(java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: boolean isParam(java.lang.String)>",
	"line": 45
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = virtualinvoke routePart.<java.lang.String: boolean startsWith(java.lang.String)>(':')",
				"location": {
					"file": "",
					"class": "spark.utils.SparkUtils",
					"method": "<spark.utils.SparkUtils: boolean isParam(java.lang.String)>",
					"line": 45
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack28 = l13 - l11,2642,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack28 = l13 - l11, 2642)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack28,2642,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2595
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2590
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2637
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2642
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 156
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2616
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2629
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2633
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2642
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack28 = l13 - l11",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2642
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2595
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2590
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2637
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept')",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 81
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2616
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2629
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2633
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2637
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l4#4 = l14",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2637
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 91
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>()",
				"location": {
					"file": "",
					"class": "spark.Request",
					"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
					"line": 98
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList),101,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList),101,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,this.<spark.Request: java.util.List splat> = $stack11,101,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, this.<spark.Request: java.util.List splat> = $stack11, 101))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 101
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 101
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 117
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 101
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList)",
				"location": {
					"file": "",
					"class": "spark.Request",
					"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
					"line": 101
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept')",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 81
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack24 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2605
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack43 = interfaceinvoke httpMethod.<java.util.Iterator: boolean hasNext()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack43 = interfaceinvoke httpMethod.<java.util.Iterator: boolean hasNext()>(), 93)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack43 = interfaceinvoke httpMethod.<java.util.Iterator: boolean hasNext()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack43 = interfaceinvoke httpMethod.<java.util.Iterator: boolean hasNext()>(), 93))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 91
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack43 = interfaceinvoke httpMethod.<java.util.Iterator: boolean hasNext()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 93
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String requestURI>,77,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j),411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j), 411)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack30 = (java.lang.String) $stack29,411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack30 = (java.lang.String) $stack29, 411)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,splatParam = $stack20,407,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, splatParam = $stack20, 407)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack21 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(i),407,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack21 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(i), 407)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack22 = (java.lang.String) $stack21,407,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack22 = (java.lang.String) $stack21, 407)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,specialinvoke $stack20.<java.lang.StringBuilder: void <init>(java.lang.String)>($stack22),407,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, specialinvoke $stack20.<java.lang.StringBuilder: void <init>(java.lang.String)>($stack22), 407))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 407
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 407
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 407
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 117
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getRequestURI()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getRequestURI()>",
	"line": 77
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 411
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 411
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 407
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "splatParam = $stack20",
				"location": {
					"file": "",
					"class": "spark.Request",
					"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
					"line": 407
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0),2422,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0),2422,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": 2422
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept')",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 81
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": 2422
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
					"line": 2422
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(), 94)) => Node(<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>,$stack1 = this.<spark.route.RouteMatch: spark.route.HttpMethod httpMethod>,54,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(), 94)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(),94,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(), 94)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,this.<spark.Request: spark.route.HttpMethod httpMethod> = $stack5,94,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, this.<spark.Request: spark.route.HttpMethod httpMethod> = $stack5, 94)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(), 94)) => Node(<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>,$stack1 = this.<spark.route.RouteMatch: spark.route.HttpMethod httpMethod>,54,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(), 94)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(),94,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack5 = virtualinvoke match.<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>(), 94))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>",
	"line": 54
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 94
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept')",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 81
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: spark.route.HttpMethod getHttpMethod()>",
	"line": 54
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 94
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 94
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "this.<spark.Request: spark.route.HttpMethod httpMethod> = $stack5",
				"location": {
					"file": "",
					"class": "spark.Request",
					"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
					"line": 94
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l1 := @parameter1: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l1#2 = l1 + 1,4942,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, l1#2 = l1 + 1, 4942)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack5 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack5 = l0.<java.lang.String: char[] value>, 689)) => Node(<java.lang.String: int codePointAt(int)>,$stack6 = lengthof $stack5,689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack6 = lengthof $stack5, 689)) => Node(<java.lang.String: int codePointAt(int)>,$stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6),689,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: int codePointAt(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l1 := @parameter1: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689)) => Node(<java.lang.Character: int codePointAtImpl(char[],int,int)>,l1#2 = l1 + 1,4942,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6), 689) => (<java.lang.Character: int codePointAtImpl(char[],int,int)>, l1#2 = l1 + 1, 4942))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": 689
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": 689
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": 689
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2608
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2609
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2604
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": 4942
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 91
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2575
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2579
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2579
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int codePointAt(int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
	"line": 4942
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l1#2 = l1 + 1",
				"location": {
					"file": "",
					"class": "java.lang.Character",
					"method": "<java.lang.Character: int codePointAtImpl(char[],int,int)>",
					"line": 4942
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2595
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2590
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2637
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 156
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2616
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2626
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("matchedPart: "),382,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('matchedPart: '), 382)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack20 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(i),385,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack20 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(i), 385)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack21 = (java.lang.String) $stack20,385,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack21 = (java.lang.String) $stack20, 385)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = "),382,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' = '), 382))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 385
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 385
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 382
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 91
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 382
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('matchedPart: ')",
				"location": {
					"file": "",
					"class": "spark.Request",
					"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
					"line": 382
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,61,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),94,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filter = (spark.Filter) filterTarget,99,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filter = (spark.Filter) filterTarget, 99)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,virtualinvoke filter.<spark.Filter: void handle(spark.Request,spark.Response)>(req, res),104,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke filter.<spark.Filter: void handle(spark.Request,spark.Response)>(req, res), 104)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,61,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),94,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filter = (spark.Filter) filterTarget,99,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filter = (spark.Filter) filterTarget, 99)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,virtualinvoke filter.<spark.Filter: void handle(spark.Request,spark.Response)>(req, res),104,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke filter.<spark.Filter: void handle(spark.Request,spark.Response)>(req, res), 104))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.Object getTarget()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.Object getTarget()>",
	"line": 61
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 94
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 99
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 104
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 91
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.Object getTarget()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.Object getTarget()>",
	"line": 61
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 94
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 99
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 104
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke filter.<spark.Filter: void handle(spark.Request,spark.Response)>(req, res)",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 104
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("matchedPart: "),382,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack17 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('matchedPart: '), 382)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(matchedPart),382,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack18 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(matchedPart), 382)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = "),382,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' = '), 382)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack22 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack21),385,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack22 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack21), 385)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack20 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(i),385,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack20 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(i), 385))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 385
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 91
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 382
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 382
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 382
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 385
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack22 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack21)",
				"location": {
					"file": "",
					"class": "spark.Request",
					"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
					"line": 385
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 156
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 190
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack62 = (char) l10,2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack62 = (char) l10, 2616)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2616
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept')",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 81
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2605
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2616
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack62 = (char) l10",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2616
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack23 = l3 + l5,2647,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack23 = l3 + l5, 2647)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack23 = l3 + l5,2647,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack23 = l3 + l5, 2647))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2595
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2590
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2637
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2647
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 156
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2616
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2647
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack23 = l3 + l5",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2647
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0),2422,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l3 = pathArray,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l3 = pathArray, 36)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,p = l3[l5],41,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, p = l3[l5], 41)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,l3 = pathArray,36,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, l3 = pathArray, 36)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,p = l3[l5],41,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, p = l3[l5], 41))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 34
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 36
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 41
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 91
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": 2422
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 34
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 36
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 41
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "p = l3[l5]",
				"location": {
					"file": "",
					"class": "spark.utils.SparkUtils",
					"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
					"line": 41
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.route.RouteMatch: java.lang.String getRequestURI()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String requestURI>,77,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j),411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j), 411)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack30 = (java.lang.String) $stack29,411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack30 = (java.lang.String) $stack29, 411)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,splatParam = $stack20,407,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, splatParam = $stack20, 407)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack23 = virtualinvoke splatParam.<java.lang.StringBuilder: java.lang.String toString()>(),414,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack23 = virtualinvoke splatParam.<java.lang.StringBuilder: java.lang.String toString()>(), 414)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,request := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j),411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack29 = interfaceinvoke request.<java.util.List: java.lang.Object get(int)>(j), 411)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack30 = (java.lang.String) $stack29,411,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack30 = (java.lang.String) $stack29, 411)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,splatParam = $stack20,407,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, splatParam = $stack20, 407)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,$stack23 = virtualinvoke splatParam.<java.lang.StringBuilder: java.lang.String toString()>(),414,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, $stack23 = virtualinvoke splatParam.<java.lang.StringBuilder: java.lang.String toString()>(), 414))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 411
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 411
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 407
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 414
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 91
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getRequestURI()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getRequestURI()>",
	"line": 77
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 411
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 411
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 407
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 414
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack23 = virtualinvoke splatParam.<java.lang.StringBuilder: java.lang.String toString()>()",
				"location": {
					"file": "",
					"class": "spark.Request",
					"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
					"line": 414
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList),100,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,this.<spark.Request: java.util.Map params> = $stack10,100,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, this.<spark.Request: java.util.Map params> = $stack10, 100)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList),100,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,this.<spark.Request: java.util.Map params> = $stack10,100,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, this.<spark.Request: java.util.Map params> = $stack10, 100))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 100
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 100
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept')",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 81
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 100
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 100
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "this.<spark.Request: java.util.Map params> = $stack10",
				"location": {
					"file": "",
					"class": "spark.Request",
					"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
					"line": 100
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack52 = interfaceinvoke request#44.<java.util.Iterator: boolean hasNext()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack52 = interfaceinvoke request#44.<java.util.Iterator: boolean hasNext()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack52 == 0 goto (branch),158,SinkNode, path: ) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept')",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 81
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "if $stack52 == 0 goto (branch)",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 158
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,nbrOfMatchedParts = interfaceinvoke matched.<java.util.List: int size()>(),396,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, nbrOfMatchedParts = interfaceinvoke matched.<java.util.List: int size()>(), 396)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101)) => Node(<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>,nbrOfMatchedParts = interfaceinvoke matched.<java.util.List: int size()>(),396,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack11 = staticinvoke <spark.Request: java.util.List getSplat(java.util.List,java.util.List)>(requestList, matchedList), 101) => (<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>, nbrOfMatchedParts = interfaceinvoke matched.<java.util.List: int size()>(), 396))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 396
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 156
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
	"line": 396
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "nbrOfMatchedParts = interfaceinvoke matched.<java.util.List: int size()>()",
				"location": {
					"file": "",
					"class": "spark.Request",
					"method": "<spark.Request: java.util.List getSplat(java.util.List,java.util.List)>",
					"line": 396
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("Accept"),81,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept'), 81)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2629,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2629)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack36 = lengthof l4#4,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack36 = lengthof l4#4, 2635)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack36 = lengthof l4#4,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack36 = lengthof l4#4, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2595
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2590
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2637
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "acceptType = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('Accept')",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 81
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2616
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2629
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2633
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2637
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack36 = lengthof l4#4",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
					"line": 2635
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,61,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),94,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack98 = filterTarget instanceof spark.Filter,95,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack98 = filterTarget instanceof spark.Filter, 95)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack98 == 0 goto (branch),95,SinkNode, path: ) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,61,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),94,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack98 = filterTarget instanceof spark.Filter,95,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack98 = filterTarget instanceof spark.Filter, 95))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.Object getTarget()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.Object getTarget()>",
	"line": 61
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 94
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 95
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 91
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.Object getTarget()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.Object getTarget()>",
	"line": 61
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 94
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 95
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 95
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "if $stack98 == 0 goto (branch)",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 95
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 117)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType),117,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0),2422,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(),97,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack6 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getRequestURI()>(), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,route := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97)) => Node(<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>,pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>("/"),34,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, requestList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack6), 97) => (<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>, pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/'), 34))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 97
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 34
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack45 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 117
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": 2422
},{
	"class": "spark.utils.SparkUtils",
	"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
	"line": 34
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "pathArray = virtualinvoke route.<java.lang.String: java.lang.String[] split(java.lang.String)>('/')",
				"location": {
					"file": "",
					"class": "spark.utils.SparkUtils",
					"method": "<spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>",
					"line": 34
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType),156,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#44 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(),190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack63 = interfaceinvoke request#44.<java.util.Iterator: java.lang.Object next()>(), 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#51 = (spark.route.RouteMatch) $stack63,190,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#51 = (spark.route.RouteMatch) $stack63, 190)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,61,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,61,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 94))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.Object getTarget()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.Object getTarget()>",
	"line": 61
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack49 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 156
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 156
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 158
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 190
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.Object getTarget()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.Object getTarget()>",
	"line": 61
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>",
				"location": {
					"file": "",
					"class": "spark.route.RouteMatch",
					"method": "<spark.route.RouteMatch: java.lang.Object getTarget()>",
					"line": 61
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>,91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>, 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.route.RouteMatch: java.lang.String getMatchUri()>,$stack1 = this.<spark.route.RouteMatch: java.lang.String matchUri>,69,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41),2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack43 = $stack42 - l11,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack43 = $stack42 - l11, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack43,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack41 = l12 + l5,2626,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.Character: int toChars(int,char[],int)>,l2 := @parameter2: int,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.Character: int toChars(int,char[],int)>,staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2),5141,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626) => (<java.lang.Character: int toChars(int,char[],int)>, staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2), 5141)) SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),80,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType),91,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),93,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 93)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack96 = interfaceinvoke httpMethod.<java.util.Iterator: java.lang.Object next()>(), 127)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = (spark.route.RouteMatch) $stack96,127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = (spark.route.RouteMatch) $stack96, 127)) => Node(<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,match := @parameter0: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,$stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack8 = virtualinvoke match.<spark.route.RouteMatch: java.lang.String getMatchUri()>(), 98)) => Node(<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>,matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8),98,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, matchedList = staticinvoke <spark.utils.SparkUtils: java.util.List convertRouteToList(java.lang.String)>($stack8), 98)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matched := @parameter1: java.util.List,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,$stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i),380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, $stack11 = interfaceinvoke matched.<java.util.List: java.lang.Object get(int)>(i), 380)) => Node(<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>,matchedPart = (java.lang.String) $stack11,380,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, httpRequest), 96) => (<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 29) => (<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>, $stack10 = staticinvoke <spark.Request: java.util.Map getParams(java.util.List,java.util.List)>(requestList, matchedList), 100) => (<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>, matchedPart = (java.lang.String) $stack11, 380)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.Character: int toChars(int,char[],int)>,l1 := @parameter1: char[],-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.Character: int toChars(int,char[],int)>,staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2),5141,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke $stack26.<java.lang.String: java.lang.String toLowerCase()>(), 79) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626) => (<java.lang.Character: int toChars(int,char[],int)>, staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2), 5141))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 80
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 80
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2595
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2590
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2635
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2637
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int toChars(int,char[],int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int toChars(int,char[],int)>",
	"line": 5141
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack40 = this.<spark.webserver.MatcherFilter: spark.route.RouteMatcher routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.webserver.MatcherFilter",
					"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 91
				},
				"stackTrace": [{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 91
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 93
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.webserver.MatcherFilter",
	"method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 127
},{
	"class": "spark.RequestResponseFactory",
	"method": "<spark.RequestResponseFactory: spark.Request create(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": -1
},{
	"class": "spark.route.RouteMatch",
	"method": "<spark.route.RouteMatch: java.lang.String getMatchUri()>",
	"line": 69
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: void <init>(spark.route.RouteMatch,javax.servlet.http.HttpServletRequest)>",
	"line": 98
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": -1
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "spark.Request",
	"method": "<spark.Request: java.util.Map getParams(java.util.List,java.util.List)>",
	"line": 380
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase()>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2616
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>",
	"line": 2626
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int toChars(int,char[],int)>",
	"line": -1
},{
	"class": "java.lang.Character",
	"method": "<java.lang.Character: int toChars(int,char[],int)>",
	"line": 5141
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2)",
				"location": {
					"file": "",
					"class": "java.lang.Character",
					"method": "<java.lang.Character: int toChars(int,char[],int)>",
					"line": 5141
				}
			}
		]
	}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.webserver.MatcherFilter",
  "method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "80"
},
"stackTrace": ["(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType)",
"location": {
  "file": "",
  "class": "spark.webserver.MatcherFilter",
  "method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = interfaceinvoke $stack45.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#10, uri, acceptType), 117)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.webserver.MatcherFilter",
  "method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "80"
},
"stackTrace": ["(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack93 = interfaceinvoke $stack92.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack91, uri, acceptType)",
"location": {
  "file": "",
  "class": "spark.webserver.MatcherFilter",
  "method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "124"
},
"stackTrace": ["(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack93 = interfaceinvoke $stack92.<spark.route.RouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack91, uri, acceptType), 124)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack93 == null goto $stack94 = null",
"location": {
  "file": "",
  "class": "spark.webserver.MatcherFilter",
  "method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "124"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.webserver.MatcherFilter",
  "method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "80"
},
"stackTrace": ["(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType)",
"location": {
  "file": "",
  "class": "spark.webserver.MatcherFilter",
  "method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "91"
},
"stackTrace": ["(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack40.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack39, uri, acceptType), 91)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.webserver.MatcherFilter",
  "method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "80"
},
"stackTrace": ["(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 80)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType)",
"location": {
  "file": "",
  "class": "spark.webserver.MatcherFilter",
  "method": "<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "156"
},
"stackTrace": ["(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = interfaceinvoke $stack49.<spark.route.RouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack48, uri, acceptType), 156)"]
}]
}
}

]
